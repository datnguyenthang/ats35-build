webpackJsonp([25],{1887:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i.d(t,"CoreLoginSitePageModule",function(){return c});var n=i(0),o=i(4),r=i(2015),s=i(1),l=i(15),a=this&&this.__decorate||function(e,t,i,n){var o,r=arguments.length,s=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,n);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(r<3?o(s):r>3?o(t,i,s):o(t,i))||s);return r>3&&s&&Object.defineProperty(t,i,s),s},c=function(){function e(){}return e=a([Object(n.I)({declarations:[r.a],imports:[l.a,o.l.forChild(r.a),s.b.forChild()]})],e)}()},2015:function(e,t,i){"use strict";i.d(t,"a",function(){return p});var n=i(0),o=i(4),r=i(9),s=i(2),l=i(8),a=i(72),c=i(71),d=i(20),u=this&&this.__decorate||function(e,t,i,n){var o,r=arguments.length,s=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,n);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(r<3?o(s):r>3?o(t,i,s):o(t,i))||s);return r>3&&s&&Object.defineProperty(t,i,s),s},f=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},p=function(){function e(e,t,i,n,o,r,s,l){this.navCtrl=t,this.appProvider=n,this.sitesProvider=o,this.loginHelper=r,this.modalCtrl=s,this.domUtils=l,this.displayAsButtons=!1,this.showKeyboard=!1,this.showKeyboard=!!e.get("showKeyboard");var c="";this.loginHelper.hasSeveralFixedSites()&&(this.fixedSites=this.loginHelper.getFixedSites(),this.displayAsButtons="buttons"==a.a.multisitesdisplay,c=this.fixedSites[0].url),this.siteForm=i.group({siteUrl:[c,d.h.required]})}return e.prototype.connect=function(e){var t=this;if(this.appProvider.closeKeyboard(),e)if(this.appProvider.isOnline()){var i=this.domUtils.showModalLoading(),n=this.sitesProvider.getDemoSiteData(e);n?this.sitesProvider.getUserToken(n.url,n.username,n.password).then(function(e){return t.sitesProvider.newSite(e.siteUrl,e.token,e.privateToken).then(function(){return t.loginHelper.goToSiteInitialPage()},function(e){t.domUtils.showErrorModal(e)})},function(e){t.loginHelper.treatUserTokenError(n.url,e)}).finally(function(){i.dismiss()}):this.sitesProvider.checkSite(e).then(function(e){e.warning&&t.domUtils.showErrorModal(e.warning,!0,4e3),t.loginHelper.isSSOLoginNeeded(e.code)?t.loginHelper.confirmAndOpenBrowserForSSOLogin(e.siteUrl,e.code,e.service,e.config&&e.config.launchurl):t.navCtrl.push("CoreLoginIntroductionPage",{siteUrl:e.siteUrl,siteConfig:e.config})},function(i){t.showLoginIssue(e,i)}).finally(function(){i.dismiss()})}else this.domUtils.showErrorModal("core.networkerrormsg",!0);else this.domUtils.showErrorModal("core.login.siteurlrequired",!0)},e.prototype.showHelp=function(){this.modalCtrl.create("CoreLoginSiteHelpPage").present()},e.prototype.showLoginIssue=function(e,t){this.modalCtrl.create("CoreLoginSiteErrorPage",{siteUrl:e,issue:t}).present()},e=u([Object(n.m)({selector:"page-core-login-site",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'core.login.connecttomoodle\' | translate }}</ion-title>\n\n        <ion-buttons end>\n            <button ion-button icon-only (click)="showHelp()" [attr.aria-label]="\'core.help\' | translate">\n                <ion-icon name="help-circle"></ion-icon>\n            </button>\n        </ion-buttons>\n    </ion-navbar>\n</ion-header>\n<ion-content class="core-center-view">\n    <div class="box">\n        <div text-center padding>\n            <img src="assets/img/login_logo.png" class="avatar-full login-logo" role="presentation">\n        </div>\n        <form ion-list no-lines [formGroup]="siteForm" (ngSubmit)="connect(siteForm.value.siteUrl)">\n            \x3c!-- Form to input the site URL if there are no fixed sites. --\x3e\n            <div *ngIf="!fixedSites">\n                <p padding>{{ \'core.login.newsitedescription\' | translate }}</p>\n                <ion-item>\n                    <ion-input type="url" name="url" placeholder="{{ \'core.login.siteaddress\' | translate }}" formControlName="siteUrl" [core-auto-focus]="showKeyboard"></ion-input>\n                </ion-item>\n            </div>\n\n            \x3c!-- Pick the site from a list of fixed sites. --\x3e\n            <div *ngIf="fixedSites" text-wrap>\n                \x3c!-- Display them using a select. --\x3e\n                <ion-item *ngIf="!displayAsButtons" margin-vertical>\n                    <ion-label stacked for="siteSelect">{{ \'core.login.selectsite\' | translate }}</ion-label>\n                    <ion-select formControlName="siteUrl" name="url" placeholder="{{ \'core.login.siteaddress\' | translate }}" interface="popover">\n                        <ion-option *ngFor="let site of fixedSites" [value]="site.url">{{site.name}}</ion-option>\n                    </ion-select>\n                </ion-item>\n\n                \x3c!-- Display them using buttons. --\x3e\n                <div *ngIf="displayAsButtons">\n                    <p class="padding no-padding-bottom">{{ \'core.login.selectsite\' | translate }}</p>\n                    <a *ngFor="let site of fixedSites" ion-button block (click)="connect(site.url)" title="{{site.name}}" margin-bottom>{{site.name}}</a>\n                </div>\n            </div>\n\n            <button *ngIf="!fixedSites || !displayAsButtons" ion-button block [disabled]="!siteForm.valid">{{ \'core.login.connect\' | translate }}</button>\n        </form>\n    </div>\n</ion-content>\n'}),f("design:paramtypes",[o.r,o.q,d.a,r.a,s.a,c.a,o.o,l.a])],e)}()}});