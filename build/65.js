webpackJsonp([65],{1843:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"AddonModQuizReviewPageModule",function(){return m});var i=n(0),o=n(4),a=n(1),r=n(16),s=n(15),d=n(66),u=n(939),l=n(1968),c=this&&this.__decorate||function(t,e,n,i){var o,a=arguments.length,r=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(r=(a<3?o(r):a>3?o(e,n,r):o(e,n))||r);return a>3&&r&&Object.defineProperty(e,n,r),r},m=function(){function t(){}return t=c([Object(i.I)({declarations:[l.a],imports:[r.a,s.a,d.a,u.a,o.l.forChild(l.a),a.b.forChild()]})],t)}()},1968:function(t,e,n){"use strict";n.d(e,"a",function(){return h});var i=n(0),o=n(4),a=n(1),r=n(8),s=n(11),d=n(22),u=n(73),l=n(92),c=n(251),m=this&&this.__decorate||function(t,e,n,i){var o,a=arguments.length,r=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(r=(a<3?o(r):a>3?o(e,n,r):o(e,n))||r);return a>3&&r&&Object.defineProperty(e,n,r),r},p=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},h=function(){function t(t,e,n,i,o,a,r,s,d){this.translate=n,this.domUtils=i,this.timeUtils=o,this.quizProvider=a,this.quizHelper=r,this.questionHelper=s,this.textUtils=d,this.component=l.a.COMPONENT,this.quizId=t.get("quizId"),this.courseId=t.get("courseId"),this.attemptId=t.get("attemptId"),this.currentPage=t.get("page")||-1,this.showAll=-1==this.currentPage,this.navigationModal=e.create("AddonModQuizNavigationModalPage",{isReview:!0,page:this})}return t.prototype.ngOnInit=function(){var t=this;this.fetchData().then(function(){t.quizProvider.logViewAttemptReview(t.attemptId).catch(function(t){})}).finally(function(){t.loaded=!0})},t.prototype.changePage=function(t,e,n){var i=this;void 0===n||-1!=this.attempt.currentpage&&t!=this.currentPage?t!=this.currentPage&&(this.loaded=!1,this.content.scrollToTop(),this.loadPage(t).catch(function(t){i.domUtils.showErrorModalDefault(t,"addon.mod_quiz.errorgetquestions",!0)}).finally(function(){i.loaded=!0,void 0!==n&&setTimeout(function(){i.scrollToQuestion(n)},2e3)})):this.scrollToQuestion(n)},t.prototype.fetchData=function(){var t=this;return this.quizProvider.getQuizById(this.courseId,this.quizId).then(function(e){return t.quiz=e,t.componentId=t.quiz.coursemodule,t.quizProvider.getCombinedReviewOptions(t.quizId).then(function(e){return t.options=e,t.loadNavigation().then(function(){return t.loadPage(t.currentPage)})})}).catch(function(e){t.domUtils.showErrorModalDefault(e,"addon.mod_quiz.errorgetquiz",!0)})},t.prototype.loadPage=function(t){var e=this;return this.quizProvider.getAttemptReview(this.attemptId,t).then(function(n){e.attempt=n.attempt,e.attempt.currentpage=t,e.currentPage=t,e.setSummaryCalculatedData(n),e.questions=n.questions,e.nextPage=-1==t?void 0:t+1,e.previousPage=t-1,e.questions.forEach(function(t){t.readableMark=e.quizHelper.getQuestionMarkFromHtml(t.html),e.questionHelper.extractQuestionInfoBox(t,".info"),t.preferredBehaviour=e.quiz.preferredbehaviour})})},t.prototype.loadNavigation=function(){var t=this;return this.quizProvider.getAttemptReview(this.attemptId,-1).then(function(e){var n=e.questions[e.questions.length-1];e.questions.forEach(function(e){e.stateClass=t.questionHelper.getQuestionStateClass(e.state)}),t.navigation=e.questions,t.numPages=n?n.page+1:0})},t.prototype.refreshData=function(t){var e=this,n=[];n.push(this.quizProvider.invalidateQuizData(this.courseId)),n.push(this.quizProvider.invalidateCombinedReviewOptionsForUser(this.quizId)),n.push(this.quizProvider.invalidateAttemptReview(this.attemptId)),Promise.all(n).finally(function(){return e.fetchData()}).finally(function(){t.complete()})},t.prototype.scrollToQuestion=function(t){this.domUtils.scrollToElementBySelector(this.content,"#addon-mod_quiz-question-"+t)},t.prototype.setSummaryCalculatedData=function(t){var e=this;if(this.attempt.readableState=this.quizProvider.getAttemptReadableStateName(this.attempt.state),this.attempt.state==l.a.ATTEMPT_FINISHED){this.showCompleted=!0,this.additionalData=t.additionaldata;var n=this.attempt.timefinish-this.attempt.timestart;if(n&&(this.attempt.timeTaken=this.timeUtils.formatTime(n),this.quiz.timelimit&&n>this.quiz.timelimit+60&&(this.attempt.overTime=this.timeUtils.formatTime(n-this.quiz.timelimit))),this.options.someoptions.marks>=l.a.QUESTION_OPTIONS_MARK_AND_MAX&&this.quizProvider.quizHasGrades(this.quiz))if(null===t.grade||void 0===t.grade)this.attempt.readableGrade=this.quizProvider.formatGrade(t.grade,this.quiz.decimalpoints);else{this.quiz.grade!=this.quiz.sumgrades&&(this.attempt.readableMark=this.translate.instant("addon.mod_quiz.outofshort",{$a:{grade:this.quizProvider.formatGrade(this.attempt.sumgrades,this.quiz.decimalpoints),maxgrade:this.quizProvider.formatGrade(this.quiz.sumgrades,this.quiz.decimalpoints)}}));var i={grade:this.quizProvider.formatGrade(t.grade,this.quiz.decimalpoints),maxgrade:this.quizProvider.formatGrade(this.quiz.grade,this.quiz.decimalpoints)};100!=this.quiz.grade?(i.percent=this.textUtils.roundToDecimals(100*this.attempt.sumgrades/this.quiz.sumgrades,0),this.attempt.readableGrade=this.translate.instant("addon.mod_quiz.outofpercent",{$a:i})):this.attempt.readableGrade=this.translate.instant("addon.mod_quiz.outof",{$a:i})}this.additionalData.forEach(function(t){t.content=e.domUtils.removeElementFromHtml(t.content,".helptooltip")})}},t.prototype.switchMode=function(){this.showAll=!this.showAll,this.loadPage(this.showAll?-1:0)},m([Object(i._9)(o.f),p("design:type",o.f)],t.prototype,"content",void 0),t=m([Object(i.m)({selector:"page-addon-mod-quiz-review",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'addon.mod_quiz.review\' | translate }}</ion-title>\n\n        <ion-buttons end>\n            <button *ngIf="navigation && navigation.length" ion-button icon-only [attr.aria-label]="\'addon.mod_quiz.opentoc\' | translate" (click)="navigationModal.present()">\n                <ion-icon name="bookmark"></ion-icon>\n            </button>\n        </ion-buttons>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <ion-refresher [enabled]="loaded" (ionRefresh)="refreshData($event)">\n        <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n    </ion-refresher>\n    <core-loading [hideUntil]="loaded">\n\n        \x3c!-- Review summary --\x3e\n        <ion-card *ngIf="attempt">\n            <ion-card-header text-wrap>\n                <h2 *ngIf="attempt.preview">{{ \'addon.mod_quiz.reviewofpreview\' | translate }}</h2>\n                <h2 *ngIf="!attempt.preview">{{ \'addon.mod_quiz.reviewofattempt\' | translate:{$a: attempt.attempt} }}</h2>\n            </ion-card-header>\n            <ion-list>\n                <ion-item text-wrap>\n                    <p class="item-heading">{{ \'addon.mod_quiz.startedon\' | translate }}</p>\n                    <p>{{ attempt.timestart * 1000 | coreFormatDate:"dfmediumdate" }}</p>\n                </ion-item>\n                <ion-item text-wrap>\n                    <p class="item-heading">{{ \'addon.mod_quiz.attemptstate\' | translate }}</p>\n                    <p>{{ attempt.readableState }}</p>\n                </ion-item>\n                <ion-item text-wrap *ngIf="showCompleted">\n                    <p class="item-heading">{{ \'addon.mod_quiz.completedon\' | translate }}</p>\n                    <p>{{ attempt.timefinish * 1000 | coreFormatDate:"dfmediumdate" }}</p>\n                </ion-item>\n                <ion-item text-wrap *ngIf="attempt.timeTaken">\n                    <p class="item-heading">{{ \'addon.mod_quiz.timetaken\' | translate }}</p>\n                    <p>{{ attempt.timeTaken }}</p>\n                </ion-item>\n                <ion-item text-wrap *ngIf="attempt.overTime">\n                    <p class="item-heading">{{ \'addon.mod_quiz.overdue\' | translate }}</p>\n                    <p>{{ attempt.overTime }}</p>\n                </ion-item>\n                <ion-item text-wrap *ngIf="attempt.readableMark">\n                    <p class="item-heading">{{ \'addon.mod_quiz.marks\' | translate }}</p>\n                    <p><core-format-text [text]="attempt.readableMark"></core-format-text></p>\n                </ion-item>\n                <ion-item text-wrap *ngIf="attempt.readableGrade">\n                    <p class="item-heading">{{ \'addon.mod_quiz.grade\' | translate }}</p>\n                    <p>{{ attempt.readableGrade }}</p>\n                </ion-item>\n                <ion-item text-wrap *ngFor="let data of additionalData">\n                    <p class="item-heading">{{ data.title }}</p>\n                    <core-format-text [component]="component" [componentId]="componentId" [text]="data.content"></core-format-text>\n                </ion-item>\n            </ion-list>\n        </ion-card>\n\n        \x3c!-- Questions --\x3e\n        <div *ngIf="attempt && questions.length">\n            \x3c!-- Arrows to go to next/previous. --\x3e\n            <ng-container *ngTemplateOutlet="navArrows"></ng-container>\n\n            \x3c!-- Questions. --\x3e\n            <div *ngFor="let question of questions">\n                <ion-card id="addon-mod_quiz-question-{{question.slot}}">\n                    \x3c!-- "Header" of the question. --\x3e\n                    <ion-item-divider color="light">\n                        <h2 *ngIf="question.number" class="inline">{{ \'core.question.questionno\' | translate:{$a: question.number} }}</h2>\n                        <h2 *ngIf="!question.number" class="inline">{{ \'core.question.information\' | translate }}</h2>\n                        <ion-note text-wrap item-end *ngIf="question.status || question.readableMark">\n                            <p *ngIf="question.status" class="block">{{question.status}}</p>\n                            <p *ngIf="question.readableMark"><core-format-text [text]="question.readableMark"></core-format-text></p>\n                        </ion-note>\n                    </ion-item-divider>\n                    \x3c!-- Body of the question. --\x3e\n                    <core-question text-wrap [question]="question" [component]="component" [componentId]="componentId" [attemptId]="attempt.id" [offlineEnabled]="false"></core-question>\n                </ion-card>\n            </div>\n\n            \x3c!-- Arrows to go to next/previous. --\x3e\n            <ng-container *ngTemplateOutlet="navArrows"></ng-container>\n        </div>\n    </core-loading>\n</ion-content>\n\n\x3c!-- Arrows to go to next/previous. --\x3e\n<ng-template #navArrows>\n    <ion-row align-items-center>\n        <ion-col>\n            <a ion-button icon-only color="light" *ngIf="previousPage >= 0" (click)="changePage(previousPage)" [title]="\'core.previous\' | translate">\n                <ion-icon name="arrow-back" md="ios-arrow-back"></ion-icon>\n            </a>\n        </ion-col>\n        <ion-col text-right>\n            <a ion-button icon-only color="light" *ngIf="nextPage >= -1" (click)="changePage(nextPage)" [title]="\'core.next\' | translate">\n                <ion-icon name="arrow-forward" md="ios-arrow-forward"></ion-icon>\n            </a>\n        </ion-col>\n    </ion-row>\n</ng-template>\n'}),p("design:paramtypes",[o.r,o.o,a.c,r.a,d.a,l.a,c.a,u.a,s.a])],t)}()}});