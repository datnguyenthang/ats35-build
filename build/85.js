webpackJsonp([85],{1822:function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),o.d(e,"AddonModFeedbackRespondentsPageModule",function(){return f});var n=o(0),a=o(4),s=o(1),r=o(15),i=o(16),p=o(66),d=o(932),l=o(1946),c=this&&this.__decorate||function(t,e,o,n){var a,s=arguments.length,r=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,o,n);else for(var i=t.length-1;i>=0;i--)(a=t[i])&&(r=(s<3?a(r):s>3?a(e,o,r):a(e,o))||r);return s>3&&r&&Object.defineProperty(e,o,r),r},f=function(){function t(){}return t=c([Object(n.I)({declarations:[l.a],imports:[r.a,i.a,p.a,d.a,a.l.forChild(l.a),s.b.forChild()]})],t)}()},1946:function(t,e,o){"use strict";o.d(e,"a",function(){return f});var n=o(0),a=o(4),s=o(86),r=o(248),i=o(46),p=o(8),d=o(133),l=this&&this.__decorate||function(t,e,o,n){var a,s=arguments.length,r=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,o,n);else for(var i=t.length-1;i>=0;i--)(a=t[i])&&(r=(s<3?a(r):s>3?a(e,o,r):a(e,o))||r);return s>3&&r&&Object.defineProperty(e,o,r),r},c=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},f=function(){function t(t,e,o,n,a,s){this.feedbackProvider=e,this.groupsProvider=o,this.domUtils=n,this.feedbackHelper=a,this.navCtrl=s,this.page=0,this.groupInfo={groups:[],separateGroups:!1,visibleGroups:!1},this.responses={attempts:[],total:0,canLoadMore:!1},this.anonResponses={attempts:[],total:0,canLoadMore:!1},this.feedbackLoaded=!1,this.loadingMore=!1;var r=t.get("module");this.moduleId=r.id,this.feedbackId=r.instance,this.courseId=t.get("courseId"),this.selectedGroup=t.get("group")||0}return t.prototype.ionViewDidLoad=function(){var t=this;this.fetchData().then(function(){t.splitviewCtrl.isOn()&&(t.responses.attempts.length>0?t.gotoAttempt(t.responses.attempts[0]):t.anonResponses.attempts.length>0&&t.gotoAttempt(t.anonResponses.attempts[0]))})},t.prototype.fetchData=function(t){var e=this;return void 0===t&&(t=!1),this.page=0,this.responses.total=0,this.responses.attempts=[],this.anonResponses.total=0,this.anonResponses.attempts=[],this.groupsProvider.getActivityGroupInfo(this.moduleId).then(function(t){return e.groupInfo=t,e.loadGroupAttempts(e.selectedGroup)}).catch(function(o){return e.domUtils.showErrorModalDefault(o,"core.course.errorgetmodule",!0),t||e.navCtrl.pop(),Promise.reject(null)})},t.prototype.loadGroupAttempts=function(t){var e=this;return void 0===t?(this.page++,this.loadingMore=!0):(this.selectedGroup=t,this.page=0,this.responses.total=0,this.responses.attempts=[],this.anonResponses.total=0,this.anonResponses.attempts=[],this.feedbackLoaded=!1),this.feedbackHelper.getResponsesAnalysis(this.feedbackId,this.selectedGroup,this.page).then(function(t){return e.responses.total=t.totalattempts,e.anonResponses.total=t.totalanonattempts,e.anonResponses.attempts.length<t.totalanonattempts&&(e.anonResponses.attempts=e.anonResponses.attempts.concat(t.anonattempts)),e.responses.attempts.length<t.totalattempts&&(e.responses.attempts=e.responses.attempts.concat(t.attempts)),e.anonResponses.canLoadMore=e.anonResponses.attempts.length<t.totalanonattempts,e.responses.canLoadMore=e.responses.attempts.length<t.totalattempts,t}).finally(function(){e.loadingMore=!1,e.feedbackLoaded=!0})},t.prototype.gotoAttempt=function(t){this.attemptId=t.id,this.splitviewCtrl.push("AddonModFeedbackAttemptPage",{attemptId:t.id,attempt:t,feedbackId:this.feedbackId,moduleId:this.moduleId})},t.prototype.loadAttempts=function(t){var e=this;this.loadGroupAttempts(t).catch(function(t){e.domUtils.showErrorModalDefault(t,"core.course.errorgetmodule",!0)})},t.prototype.refreshFeedback=function(t){var e=this;if(this.feedbackLoaded){var o=[];o.push(this.feedbackProvider.invalidateResponsesAnalysisData(this.feedbackId)),o.push(this.groupsProvider.invalidateActivityGroupInfo(this.moduleId)),Promise.all(o).finally(function(){return e.fetchData(!0)}).finally(function(){t.complete()})}},l([Object(n._9)(d.a),c("design:type",d.a)],t.prototype,"splitviewCtrl",void 0),t=l([Object(n.m)({selector:"page-addon-mod-feedback-respondents",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'addon.mod_feedback.responses\' |translate }}</ion-title>\n    </ion-navbar>\n</ion-header>\n<core-split-view>\n    <ion-content>\n        <ion-refresher [enabled]="feedbackLoaded" (ionRefresh)="refreshFeedback($event)">\n            <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n        </ion-refresher>\n        <core-loading [hideUntil]="feedbackLoaded">\n            <ion-list no-margin>\n                <ion-item text-wrap *ngIf="groupInfo.separateGroups || groupInfo.visibleGroups">\n                    <ion-label id="addon-feedback-groupslabel" *ngIf="groupInfo.separateGroups">{{ \'core.groupsseparate\' | translate }}</ion-label>\n                    <ion-label id="addon-feedback-groupslabel" *ngIf="groupInfo.visibleGroups">{{ \'core.groupsvisible\' | translate }}</ion-label>\n                    <ion-select [(ngModel)]="selectedGroup" (ionChange)="loadAttempts(selectedGroup)" aria-labelledby="addon-feedback-groupslabel" interface="popover">\n                        <ion-option *ngFor="let groupOpt of groupInfo.groups" [value]="groupOpt.id">{{groupOpt.name}}</ion-option>\n                    </ion-select>\n                </ion-item>\n                <ng-container *ngIf="responses.total > 0">\n                    <ion-item-divider color="light">\n                        {{ \'addon.mod_feedback.non_anonymous_entries\' | translate : {$a: responses.total } }}\n                    </ion-item-divider>\n                    <a *ngFor="let attempt of responses.attempts" ion-item text-wrap (click)="gotoAttempt(attempt)" [class.core-split-item-selected]="attempt.id == attemptId">\n                        <ion-avatar item-start>\n                            <img [src]="attempt.profileimageurl" [alt]="\'core.pictureof\' | translate:{$a: attempt.fullname}" core-external-content onError="this.src=\'assets/img/user-avatar.png\'">\n                        </ion-avatar>\n                        <h2><core-format-text [text]="attempt.fullname"></core-format-text></h2>\n                        <p *ngIf="attempt.timemodified">{{attempt.timemodified * 1000 | coreFormatDate: "LLL"}}</p>\n                    </a>\n                    <ion-item padding text-center *ngIf="responses.canLoadMore">\n                        \x3c!-- Button and spinner to show more attempts. --\x3e\n                        <button ion-button block *ngIf="!loadingMore" (click)="loadAttempts()">{{ \'core.loadmore\' | translate }}</button>\n                        <ion-spinner *ngIf="loadingMore"></ion-spinner>\n                    </ion-item>\n                </ng-container>\n                <ng-container *ngIf="anonResponses.total > 0">\n                    <ion-item-divider color="light">\n                        {{ \'addon.mod_feedback.anonymous_entries\' |translate : {$a: anonResponses.total } }}\n                    </ion-item-divider>\n                    <a *ngFor="let attempt of anonResponses.attempts" ion-item text-wrap (click)="gotoAttempt(attempt)">\n                        <h2>{{ \'addon.mod_feedback.response_nr\' |translate }}: {{attempt.number}}</h2>\n                    </a>\n                    <ion-item padding text-center *ngIf="anonResponses.canLoadMore">\n                        \x3c!-- Button and spinner to show more attempts. --\x3e\n                        <button ion-button block *ngIf="!loadingMore" (click)="loadAttempts()">{{ \'core.loadmore\' | translate }}</button>\n                        <ion-spinner *ngIf="loadingMore"></ion-spinner>\n                    </ion-item>\n                </ng-container>\n            </ion-list>\n        </core-loading>\n    </ion-content>\n</core-split-view>\n'}),c("design:paramtypes",[a.r,s.a,i.a,p.a,r.a,a.q])],t)}()}});