webpackJsonp([114],{1791:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"AddonCompetencyCompetenciesPageModule",function(){return a});var c=n(0),o=n(4),i=n(1),r=n(16),s=n(1915),p=this&&this.__decorate||function(e,t,n,c){var o,i=arguments.length,r=i<3?t:null===c?c=Object.getOwnPropertyDescriptor(t,n):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,c);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(r=(i<3?o(r):i>3?o(t,n,r):o(t,n))||r);return i>3&&r&&Object.defineProperty(t,n,r),r},a=function(){function e(){}return e=p([Object(c.I)({declarations:[s.a],imports:[r.a,o.l.forChild(s.a),i.b.forChild()]})],e)}()},1915:function(e,t,n){"use strict";n.d(t,"a",function(){return l});var c=n(0),o=n(4),i=n(1),r=n(8),s=n(133),p=n(162),a=this&&this.__decorate||function(e,t,n,c){var o,i=arguments.length,r=i<3?t:null===c?c=Object.getOwnPropertyDescriptor(t,n):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,c);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(r=(i<3?o(r):i>3?o(t,n,r):o(t,n))||r);return i>3&&r&&Object.defineProperty(t,n,r),r},d=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},l=function(){function e(e,t,n,c){this.translate=t,this.domUtils=n,this.competencyProvider=c,this.competenciesLoaded=!1,this.competencies=[],this.planId=e.get("planId"),this.courseId=e.get("courseId"),this.competencyId=e.get("competencyId"),this.userId=e.get("userId")}return e.prototype.ionViewDidLoad=function(){var e=this;this.competencyId&&this.openCompetency(this.competencyId),this.fetchCompetencies().then(function(){!e.competencyId&&e.splitviewCtrl.isOn()&&e.competencies.length>0&&e.openCompetency(e.competencies[0].id)}).finally(function(){e.competenciesLoaded=!0})},e.prototype.fetchCompetencies=function(){var e=this;return(this.planId?this.competencyProvider.getLearningPlan(this.planId):this.courseId?this.competencyProvider.getCourseCompetencies(this.courseId,this.userId):Promise.reject(null)).then(function(t){if(t.competencycount<=0)return Promise.reject(e.translate.instant("addon.competency.errornocompetenciesfound"));e.planId?(e.title=t.plan.name,e.userId=t.plan.userid):e.title=e.translate.instant("addon.competency.coursecompetencies"),e.competencies=t.competencies}).catch(function(t){e.domUtils.showErrorModalDefault(t,"Error getting competencies data.")})},e.prototype.openCompetency=function(e){this.competencyId=e;this.splitviewCtrl.push("AddonCompetencyCompetencyPage",this.planId?{competencyId:e,planId:this.planId}:{competencyId:e,courseId:this.courseId,userId:this.userId})},e.prototype.refreshCompetencies=function(e){var t=this;return(this.planId?this.competencyProvider.invalidateLearningPlan(this.planId):this.competencyProvider.invalidateCourseCompetencies(this.courseId,this.userId)).finally(function(){t.fetchCompetencies().finally(function(){e.complete()})})},a([Object(c._9)(s.a),d("design:type",s.a)],e.prototype,"splitviewCtrl",void 0),e=a([Object(c.m)({selector:"page-addon-competency-competencies",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ title }}</ion-title>\n    </ion-navbar>\n</ion-header>\n<core-split-view>\n    <ion-content>\n        <ion-refresher [enabled]="competenciesLoaded" (ionRefresh)="refreshCompetencies($event)">\n            <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n        </ion-refresher>\n        <core-loading [hideUntil]="competenciesLoaded">\n            <ion-list>\n                <a ion-item text-wrap *ngFor="let competency of competencies" [title]="competency.competency.shortname" (click)="openCompetency(competency.competency.id)" [class.core-split-item-selected]="competency.competency.id == competencyId">\n                    {{ competency.competency.shortname }} <small>{{competency.competency.idnumber}}</small>\n                    <ion-badge item-end *ngIf="competency.usercompetency" [color]="competency.usercompetency.proficiency ? \'success\' : \'danger\'">{{ competency.usercompetency.gradename }}</ion-badge>\n                    <ion-badge item-end *ngIf="competency.usercompetencycourse" [color]="competency.usercompetencycourse.proficiency ? \'success\' : \'danger\'">{{ competency.usercompetencycourse.gradename }}</ion-badge>\n                </a>\n            </ion-list>\n        </core-loading>\n    </ion-content>\n</core-split-view>'}),d("design:paramtypes",[o.r,i.c,r.a,p.a])],e)}()}});