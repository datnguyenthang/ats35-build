webpackJsonp([100],{1807:function(s,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),i.d(n,"AddonModAssignSubmissionListPageModule",function(){return l});var t=i(0),e=i(4),a=i(1),o=i(16),r=i(15),d=i(1931),u=this&&this.__decorate||function(s,n,i,t){var e,a=arguments.length,o=a<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(s,n,i,t);else for(var r=s.length-1;r>=0;r--)(e=s[r])&&(o=(a<3?e(o):a>3?e(n,i,o):e(n,i))||o);return a>3&&o&&Object.defineProperty(n,i,o),o},l=function(){function s(){}return s=u([Object(t.I)({declarations:[d.a],imports:[o.a,r.a,e.l.forChild(d.a),a.b.forChild()]})],s)}()},1931:function(s,n,i){"use strict";i.d(n,"a",function(){return p});var t=i(0),e=i(4),a=i(1),o=i(12),r=i(2),d=i(8),u=i(52),l=i(80),g=i(108),c=i(133),m=this&&this.__decorate||function(s,n,i,t){var e,a=arguments.length,o=a<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(s,n,i,t);else for(var r=s.length-1;r>=0;r--)(e=s[r])&&(o=(a<3?e(o):a>3?e(n,i,o):e(n,i))||o);return a>3&&o&&Object.defineProperty(n,i,o),o},f=this&&this.__metadata||function(s,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(s,n)},p=function(){function s(s,n,i,t,e,a,o,r){var d=this;this.domUtils=t,this.translate=e,this.assignProvider=a,this.assignOfflineProvider=o,this.assignHelper=r,this.moduleId=s.get("moduleId"),this.courseId=s.get("courseId"),this.selectedStatus=s.get("status"),this.title=this.translate.instant(this.selectedStatus?this.selectedStatus==u.a.NEED_GRADING?"addon.mod_assign.numberofsubmissionsneedgrading":"addon.mod_assign.submissionstatus_"+this.selectedStatus:"addon.mod_assign.numberofparticipants"),this.gradedObserver=i.on(u.a.GRADED_EVENT,function(s){d.assign&&s.assignmentId==d.assign.id&&s.userId==n.getCurrentSiteUserId()&&(d.loaded=!1,d.refreshAllData().finally(function(){d.loaded=!0}))},n.getCurrentSiteId())}return s.prototype.ngOnInit=function(){var s=this;this.fetchAssignment().finally(function(){!s.selectedSubmissionId&&s.splitviewCtrl.isOn()&&s.submissions.length>0&&s.loadSubmission(s.submissions[0]),s.loaded=!0})},s.prototype.ionViewCanLeave=function(){if(this.splitviewCtrl.isOn()){var s=this.splitviewCtrl.getDetailsNav().getActive().instance;if(s&&s.ionViewCanLeave)return s.ionViewCanLeave()}return!0},s.prototype.fetchAssignment=function(){var s,n,i=this;return this.assignProvider.getAssignment(this.courseId,this.moduleId).then(function(s){return i.title=s.name||i.title,i.assign=s,i.haveAllParticipants=!0,i.assignProvider.getSubmissions(s.id)}).then(function(t){return t.canviewsubmissions?(n=t,i.assignHelper.getParticipants(i.assign).then(function(n){i.haveAllParticipants=!0,s=n}).catch(function(){i.haveAllParticipants=!1})):Promise.reject(null)}).then(function(){return i.assignProvider.getSubmissionsUserData(n.submissions,i.courseId,i.assign.id,i.assign.blindmarking&&!i.assign.revealidentities,s)}).then(function(s){var n=i.selectedStatus==u.a.NEED_GRADING,t=n?u.a.SUBMISSION_STATUS_SUBMITTED:i.selectedStatus,e=[];return i.submissions=[],s.forEach(function(s){t&&t!=s.status||e.push(i.assignOfflineProvider.getSubmissionGrade(i.assign.id,s.userid).catch(function(){}).then(function(t){var e=!1;return t&&s.timemodified<t.timemodified&&(e=!0),(n?i.assignProvider.needsSubmissionToBeGraded(s,i.assign.id):Promise.resolve(!0)).then(function(n){n&&(s.statusColor=i.assignProvider.getSubmissionStatusColor(s.status),s.gradingColor=i.assignProvider.getSubmissionGradingStatusColor(s.gradingstatus),s.statusTranslated=("success"!=s.statusColor||!s.gradingstatus)&&i.translate.instant("addon.mod_assign.submissionstatus_"+s.status),e?(s.gradingStatusTranslationId="addon.mod_assign.gradenotsynced",s.gradingColor=""):s.gradingStatusTranslationId=("danger"!=s.statusColor||"danger"!=s.gradingColor)&&i.assignProvider.getSubmissionGradingStatusTranslationId(s.gradingstatus),i.submissions.push(s))})}))}),Promise.all(e)}).catch(function(s){i.domUtils.showErrorModalDefault(s,"Error getting assigment data.")})},s.prototype.loadSubmission=function(s){this.selectedSubmissionId===s.id&&this.splitviewCtrl.isOn()||(this.selectedSubmissionId=s.id,this.splitviewCtrl.push("AddonModAssignSubmissionReviewPage",{courseId:this.courseId,moduleId:this.moduleId,submitId:s.submitid,blindId:s.blindid}))},s.prototype.refreshAllData=function(){var s=this,n=[];return n.push(this.assignProvider.invalidateAssignmentData(this.courseId)),this.assign&&(n.push(this.assignProvider.invalidateAllSubmissionData(this.assign.id)),n.push(this.assignProvider.invalidateAssignmentUserMappingsData(this.assign.id)),n.push(this.assignProvider.invalidateListParticipantsData(this.assign.id))),Promise.all(n).finally(function(){return s.fetchAssignment()})},s.prototype.refreshList=function(s){this.refreshAllData().finally(function(){s.complete()})},s.prototype.ngOnDestroy=function(){this.gradedObserver&&this.gradedObserver.off()},m([Object(t._9)(c.a),f("design:type",c.a)],s.prototype,"splitviewCtrl",void 0),s=m([Object(t.m)({selector:"page-addon-mod-assign-submission-list",template:'<ion-header>\n    <ion-navbar>\n        <ion-title><core-format-text [text]="title"></core-format-text></ion-title>\n\n        <ion-buttons end></ion-buttons>\n    </ion-navbar>\n</ion-header>\n<core-split-view>\n    <ion-content>\n        <ion-refresher [enabled]="loaded" (ionRefresh)="refreshList($event)">\n            <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n        </ion-refresher>\n        <core-loading [hideUntil]="loaded">\n            <core-empty-box *ngIf="!submissions || submissions.length == 0" icon="paper" [message]="\'addon.mod_assign.submissionstatus_\' | translate">\n            </core-empty-box>\n\n            <ion-list>\n                \x3c!-- List of submissions. --\x3e\n                <ng-container *ngFor="let submission of submissions">\n                    <a ion-item text-wrap (click)="loadSubmission(submission)" [class.core-split-item-selected]="submission.id == selectedSubmissionId">\n                        <ion-avatar item-start *ngIf="submission.userprofileimageurl">\n                            <img [src]="submission.userprofileimageurl" [alt]="\'core.pictureof\' | translate:{$a: submission.userfullname}" core-external-content role="presentation" onError="this.src=\'assets/img/user-avatar.png\'">\n                        </ion-avatar>\n                        <h2 *ngIf="submission.userfullname">{{submission.userfullname}}</h2>\n                        <h2 *ngIf="!submission.userfullname">{{ \'addon.mod_assign.hiddenuser\' | translate }}{{submission.blindid}}</h2>\n                        <p *ngIf="assign.teamsubmission">\n                            <span *ngIf="submission.groupname">{{submission.groupname}}</span>\n                            <span *ngIf="assign.preventsubmissionnotingroup && !submission.groupname && !submission.manyGroups && !submission.blindid">{{ \'addon.mod_assign.noteam\' | translate }}</span>\n                            <span *ngIf="assign.preventsubmissionnotingroup && !submission.groupname && submission.manyGroups && !submission.blindid">{{ \'addon.mod_assign.multipleteams\' | translate }}</span>\n                            <span *ngIf="!assign.preventsubmissionnotingroup && !submission.groupname">{{ \'addon.mod_assign.defaultteam\' | translate }}</span>\n                        </p>\n                        <ion-badge text-center [color]="submission.statusColor" *ngIf="submission.statusTranslated">\n                            {{ submission.statusTranslated }}\n                        </ion-badge>\n                        <ion-badge text-center [color]="submission.gradingColor" *ngIf="submission.gradingStatusTranslationId">\n                            {{ submission.gradingStatusTranslationId | translate }}\n                        </ion-badge>\n                    </a>\n                </ng-container>\n\n                <ion-item text-wrap class="core-warning-card" *ngIf="!haveAllParticipants" icon-start>\n                    <ion-icon name="warning"></ion-icon>\n                    {{ \'addon.mod_assign.notallparticipantsareshown\' | translate }}\n                </ion-item>\n            </ion-list>\n        </core-loading>\n    </ion-content>\n</core-split-view>\n'}),f("design:paramtypes",[e.r,r.a,o.a,d.a,a.c,u.a,l.a,g.a])],s)}()}});