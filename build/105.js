webpackJsonp([105],{1800:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i.d(t,"AddonMessageOutputAirnotifierDevicesPageModule",function(){return d});var n=i(0),o=i(4),r=i(1),c=i(16),a=i(1924),s=this&&this.__decorate||function(e,t,i,n){var o,r=arguments.length,c=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,i,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(r<3?o(c):r>3?o(t,i,c):o(t,i))||c);return r>3&&c&&Object.defineProperty(t,i,c),c},d=function(){function e(){}return e=s([Object(n.I)({declarations:[a.a],imports:[c.a,o.l.forChild(a.a),r.b.forChild()]})],e)}()},1924:function(e,t,i){"use strict";i.d(t,"a",function(){return d});var n=i(0),o=i(8),r=i(252),c=i(398),a=this&&this.__decorate||function(e,t,i,n){var o,r=arguments.length,c=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,i,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(c=(r<3?o(c):r>3?o(t,i,c):o(t,i))||c);return r>3&&c&&Object.defineProperty(t,i,c),c},s=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},d=function(){function e(e,t,i){this.domUtils=e,this.airnotifierProivder=t,this.pushNotificationsProvider=i,this.devices=[],this.devicesLoaded=!1}return e.prototype.ionViewDidLoad=function(){this.fetchDevices()},e.prototype.fetchDevices=function(){var e=this;return this.airnotifierProivder.getUserDevices().then(function(t){var i=e.pushNotificationsProvider.getPushId();t.forEach(function(e){e.enable=!!e.enable,e.current=i&&i==e.pushid}),e.devices=t}).catch(function(t){e.domUtils.showErrorModal(t)}).finally(function(){e.devicesLoaded=!0})},e.prototype.updateDevicesAfterDelay=function(){var e=this;this.updateTimeout&&clearTimeout(this.updateTimeout),this.updateTimeout=setTimeout(function(){e.updateTimeout=null,e.updateDevices()},5e3)},e.prototype.updateDevices=function(){var e=this;this.airnotifierProivder.invalidateUserDevices().finally(function(){e.airnotifierProivder.getUserDevices()})},e.prototype.refreshDevices=function(e){var t=this;this.airnotifierProivder.invalidateUserDevices().finally(function(){t.fetchDevices().finally(function(){e.complete()})})},e.prototype.enableDevice=function(e,t){var i=this;e.updating=!0,this.airnotifierProivder.enableDevice(e.id,t).then(function(){i.updateDevicesAfterDelay()}).catch(function(t){i.domUtils.showErrorModal(t),e.enable=!e.enable}).finally(function(){e.updating=!1})},e.prototype.ngOnDestroy=function(){this.updateTimeout&&(clearTimeout(this.updateTimeout),this.updateDevices())},e=a([Object(n.m)({selector:"page-addon-message-output-airnotifier-devices",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'addon.messageoutput_airnotifier.processorsettingsdesc\' | translate }}</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <ion-refresher [enabled]="devicesLoaded" (ionRefresh)="refreshDevices($event)">\n        <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n    </ion-refresher>\n    <core-loading [hideUntil]="devicesLoaded">\n        <ion-list>\n            <ion-item text-wrap *ngFor="let device of devices">\n                <ion-label [class.core-bold]="device.current">\n                    {{ device.model }}\n                    <span *ngIf="device.current">({{ \'core.currentdevice\' | translate }})</span>\n                </ion-label>\n                <ion-spinner *ngIf="device.updating" item-end></ion-spinner>\n                <ion-toggle [disabled]="device.updating" [(ngModel)]="device.enable" (ngModelChange)="enableDevice(device, device.enable)"></ion-toggle>\n            </ion-item>\n        </ion-list>\n    </core-loading>\n</ion-content>\n'}),s("design:paramtypes",[o.a,c.a,r.a])],e)}()}});