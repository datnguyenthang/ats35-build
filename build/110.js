webpackJsonp([110],{1795:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),t.d(n,"AddonCompetencyPlanPageModule",function(){return d});var a=t(0),o=t(4),r=t(1),i=t(16),c=t(15),p=t(66),l=t(1919),s=this&&this.__decorate||function(e,n,t,a){var o,r=arguments.length,i=r<3?n:null===a?a=Object.getOwnPropertyDescriptor(n,t):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,a);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(i=(r<3?o(i):r>3?o(n,t,i):o(n,t))||i);return r>3&&i&&Object.defineProperty(n,t,i),i},d=function(){function e(){}return e=s([Object(a.I)({declarations:[l.a],imports:[i.a,c.a,p.a,o.l.forChild(l.a),r.b.forChild()]})],e)}()},1919:function(e,n,t){"use strict";t.d(n,"a",function(){return u});var a=t(0),o=t(4),r=t(1),i=t(9),c=t(8),p=t(133),l=t(162),s=t(396),d=this&&this.__decorate||function(e,n,t,a){var o,r=arguments.length,i=r<3?n:null===a?a=Object.getOwnPropertyDescriptor(n,t):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,a);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(i=(r<3?o(i):r>3?o(n,t,i):o(n,t))||i);return r>3&&i&&Object.defineProperty(n,t,i),i},m=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},f=this&&this.__param||function(e,n){return function(t,a){n(t,a,e)}},u=function(){function e(e,n,t,a,o,r,i,c){this.navCtrl=e,this.translate=t,this.appProvider=a,this.domUtils=o,this.svComponent=r,this.competencyProvider=i,this.competencyHelperProvider=c,this.planLoaded=!1,this.planId=n.get("planId")}return e.prototype.ionViewDidLoad=function(){var e=this;this.fetchLearningPlan().finally(function(){e.planLoaded=!0})},e.prototype.fetchLearningPlan=function(){var e=this;return this.competencyProvider.getLearningPlan(this.planId).then(function(n){n.plan.statusname=e.getStatusName(n.plan.status),e.competencyHelperProvider.getProfile(n.plan.userid).then(function(n){e.user=n}),e.plan=n}).catch(function(n){e.domUtils.showErrorModalDefault(n,"Error getting learning plan data.")})},e.prototype.openCompetency=function(e){var n=this.svComponent?this.svComponent.getMasterNav():this.navCtrl;this.appProvider.isWide()?n.push("AddonCompetencyCompetenciesPage",{competencyId:e,planId:this.planId}):n.push("AddonCompetencyCompetencyPage",{competencyId:e,planId:this.planId})},e.prototype.getStatusName=function(e){var n;switch(e){case l.a.STATUS_DRAFT:n="draft";break;case l.a.REVIEW_STATUS_IN_REVIEW:n="inreview";break;case l.a.REVIEW_STATUS_WAITING_FOR_REVIEW:n="waitingforreview";break;case l.a.STATUS_ACTIVE:n="active";break;case l.a.STATUS_COMPLETE:n="complete";break;default:return String(e)}return this.translate.instant("addon.competency.planstatus"+n)},e.prototype.refreshLearningPlan=function(e){var n=this;this.competencyProvider.invalidateLearningPlan(this.planId).finally(function(){n.fetchLearningPlan().finally(function(){e.complete()})})},e=d([Object(a.m)({selector:"page-addon-competency-plan",template:'<ion-header>\n    <ion-navbar>\n        <ion-title *ngIf="plan">{{plan.plan.name}}</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <ion-refresher [enabled]="planLoaded" (ionRefresh)="refreshLearningPlan($event)">\n        <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n    </ion-refresher>\n    <core-loading [hideUntil]="planLoaded">\n        <ion-card *ngIf="user">\n            <ion-item text-wrap>\n                <ion-avatar *ngIf="user.profileimageurl && user.profileimageurl !== true" item-start>\n                    <img  [src]="user.profileimageurl" [alt]="\'core.pictureof\' | translate:{$a: user.fullname}" core-external-content>\n                </ion-avatar>\n                <span *ngIf="user.profileimageurl === true" item-start>\n                    <ion-icon name="person"></ion-icon>\n                </span>\n                <h2><core-format-text [text]="user.fullname"></core-format-text></h2>\n            </ion-item>\n       </ion-card>\n        <ion-card *ngIf="plan">\n            <ion-list>\n                <ion-item text-wrap>\n                    <strong>{{ \'addon.competency.status\' | translate }}</strong>:\n                    {{ plan.plan.statusname }}\n                </ion-item>\n                <ion-item text-wrap *ngIf="plan.plan.duedate > 0">\n                    <strong>{{ \'addon.competency.duedate\' | translate }}</strong>:\n                    {{ plan.plan.duedate | coreToLocaleString }}\n                </ion-item>\n                <ion-item text-wrap *ngIf="plan.plan.template">\n                    <strong>{{ \'addon.competency.template\' | translate }}</strong>:\n                    {{ plan.plan.template.shortname }}\n                </ion-item>\n                <ion-item text-wrap>\n                    <strong>{{ \'addon.competency.progress\' | translate }}</strong>:\n                    {{ \'addon.competency.xcompetenciesproficientoutofy\' | translate: {$a: {x: plan.proficientcompetencycount, y: plan.competencycount} } }}\n                    <core-progress-bar [progress]="plan.proficientcompetencypercentage" [text]="plan.proficientcompetencypercentageformatted"></core-progress-bar>\n                </ion-item>\n            </ion-list>\n        </ion-card>\n        <ion-card *ngIf="plan">\n            <ion-card-header text-wrap>{{ \'addon.competency.learningplancompetencies\' | translate }}</ion-card-header>\n            <ion-list>\n                <ion-item text-wrap *ngIf="plan.competencycount == 0">\n                    {{ \'addon.competency.nocompetencies\' | translate }}\n                </ion-item>\n                <a ion-item text-wrap *ngFor="let competency of plan.competencies" (click)="openCompetency(competency.competency.id)" [title]="competency.competency.shortname">\n                    {{competency.competency.shortname}} <small>{{competency.competency.idnumber}}</small>\n                    <ion-badge item-end [color]="competency.usercompetency.proficiency ? \'success\' : \'danger\'">{{ competency.usercompetency.gradename }}</ion-badge>\n                </a>\n            </ion-list>\n        </ion-card>\n    </core-loading>\n</ion-content>\n'}),f(5,Object(a.N)()),m("design:paramtypes",[o.q,o.r,r.c,i.a,c.a,p.a,l.a,s.a])],e)}()}});