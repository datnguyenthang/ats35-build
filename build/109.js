webpackJsonp([109],{1796:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),t.d(n,"AddonCompetencyPlanListPageModule",function(){return p});var o=t(0),a=t(4),i=t(1),r=t(16),l=t(66),c=t(1920),s=this&&this.__decorate||function(e,n,t,o){var a,i=arguments.length,r=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(r=(i<3?a(r):i>3?a(n,t,r):a(n,t))||r);return i>3&&r&&Object.defineProperty(n,t,r),r},p=function(){function e(){}return e=s([Object(o.I)({declarations:[c.a],imports:[r.a,l.a,a.l.forChild(c.a),i.b.forChild()]})],e)}()},1920:function(e,n,t){"use strict";t.d(n,"a",function(){return p});var o=t(0),a=t(4),i=t(8),r=t(133),l=t(162),c=this&&this.__decorate||function(e,n,t,o){var a,i=arguments.length,r=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(r=(i<3?a(r):i>3?a(n,t,r):a(n,t))||r);return i>3&&r&&Object.defineProperty(n,t,r),r},s=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},p=function(){function e(e,n,t){this.domUtils=n,this.competencyProvider=t,this.plansLoaded=!1,this.plans=[],this.userId=e.get("userId")}return e.prototype.ionViewDidLoad=function(){var e=this;this.planId&&this.openPlan(this.planId),this.fetchLearningPlans().then(function(){!e.planId&&e.splitviewCtrl.isOn()&&e.plans.length>0&&e.openPlan(e.plans[0].id)}).finally(function(){e.plansLoaded=!0})},e.prototype.fetchLearningPlans=function(){var e=this;return this.competencyProvider.getLearningPlans(this.userId).then(function(n){e.plans=n}).catch(function(n){e.domUtils.showErrorModalDefault(n,"Error getting learning plans data.")})},e.prototype.refreshLearningPlans=function(e){var n=this;this.competencyProvider.invalidateLearningPlans(this.userId).finally(function(){n.fetchLearningPlans().finally(function(){e.complete()})})},e.prototype.openPlan=function(e){this.planId=e,this.splitviewCtrl.push("AddonCompetencyPlanPage",{planId:e})},c([Object(o._9)(r.a),s("design:type",r.a)],e.prototype,"splitviewCtrl",void 0),e=c([Object(o.m)({selector:"page-addon-competency-planlist",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'addon.competency.userplans\' | translate }}</ion-title>\n    </ion-navbar>\n</ion-header>\n<core-split-view>\n    <ion-content>\n        <ion-refresher [enabled]="plansLoaded" (ionRefresh)="refreshLearningPlans($event)">\n            <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n        </ion-refresher>\n        <core-loading [hideUntil]="plansLoaded">\n            <core-empty-box *ngIf="plans.length == 0" icon="map" [message]="\'addon.competency.noplanswerecreated\' | translate">\n            </core-empty-box>\n            <ion-list *ngIf="plans.length > 0" no-margin>\n                <a ion-item text-wrap *ngFor="let plan of plans" [title]="plan.name" (click)="openPlan(plan.id)" [class.core-split-item-selected]="plan.id == planId">\n                    <h2>{{ plan.name }}</h2>\n                    <p *ngIf="plan.duedate > 0">{{ \'addon.competency.duedate\' | translate }}: {{ plan.duedate | coreToLocaleString }}</p>\n                </a>\n            </ion-list>\n        </core-loading>\n    </ion-content>\n</core-split-view>\n'}),s("design:paramtypes",[a.r,i.a,l.a])],e)}()}});