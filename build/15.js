webpackJsonp([15],{1897:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i.d(t,"CoreSharedFilesListPageModule",function(){return f});var n=i(0),o=i(4),s=i(2025),r=i(1),l=i(16),a=i(15),c=this&&this.__decorate||function(e,t,i,n){var o,s=arguments.length,r=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,n);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(s<3?o(r):s>3?o(t,i,r):o(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r},f=function(){function e(){}return e=c([Object(n.I)({declarations:[s.a],imports:[l.a,a.a,o.l.forChild(s.a),r.b.forChild()]})],e)}()},2025:function(e,t,i){"use strict";i.d(t,"a",function(){return p});var n=i(0),o=i(4),s=i(1),r=i(12),l=i(27),a=i(2),c=i(11),f=i(405),d=this&&this.__decorate||function(e,t,i,n){var o,s=arguments.length,r=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,n);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(s<3?o(r):s>3?o(t,i,r):o(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r},h=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},p=function(){function e(e,t,i,n,o,s,r,l,a){this.viewCtrl=e,this.sharedFilesProvider=i,this.sitesProvider=n,this.textUtils=o,this.translate=s,this.fileProvider=r,this.eventsProvider=l,this.navCtrl=a,this.path="",this.siteId=t.get("siteId")||this.sitesProvider.getCurrentSiteId(),this.mimetypes=t.get("mimetypes"),this.isModal=!!t.get("isModal"),this.manage=!!t.get("manage"),this.pick=!!t.get("pick"),this.path=t.get("path")||""}return e.prototype.ngOnInit=function(){var e=this;this.loadFiles(),this.shareObserver=this.eventsProvider.on(r.a.FILE_SHARED,function(t){t.siteId==e.siteId&&(e.filesLoaded=!1,e.loadFiles().finally(function(){e.filesLoaded=!0}))})},e.prototype.loadFiles=function(){var e=this;return this.title=this.path?this.fileProvider.getFileAndDirectoryFromPath(this.path).name:this.translate.instant("core.sharedfiles.sharedfiles"),this.sharedFilesProvider.getSiteSharedFiles(this.siteId,this.path,this.mimetypes).then(function(t){e.files=t,e.filesLoaded=!0})},e.prototype.closeModal=function(){this.viewCtrl.dismiss()},e.prototype.refreshFiles=function(e){this.loadFiles().finally(function(){e.complete()})},e.prototype.fileDeleted=function(e){this.files.splice(e,1)},e.prototype.fileRenamed=function(e,t){this.files[e]=t},e.prototype.openFolder=function(e){var t=this.textUtils.concatenatePaths(this.path,e.name);this.isModal?(this.path=t,this.filesLoaded=!1,this.loadFiles()):this.navCtrl.push("CoreSharedFilesListPage",{path:t,manage:this.manage,pick:this.pick,siteId:this.siteId,mimetypes:this.mimetypes,isModal:this.isModal})},e.prototype.changeSite=function(e){this.siteId=e,this.path="",this.filesLoaded=!1,this.loadFiles()},e.prototype.filePicked=function(e){this.viewCtrl.dismiss(e)},e.prototype.ngOnDestroy=function(){this.shareObserver&&this.shareObserver.off()},e=d([Object(n.m)({selector:"page-core-shared-files-list",template:'<ion-header>\n    <ion-navbar>\n        <ion-title><core-format-text [text]="title"></core-format-text></ion-title>\n\n        <ion-buttons end *ngIf="isModal">\n            <button ion-button icon-only (click)="closeModal()" [attr.aria-label]="\'core.close\' | translate">\n                <ion-icon name="close"></ion-icon>\n            </button>\n        </ion-buttons>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <ion-refresher [enabled]="filesLoaded" (ionRefresh)="refreshFiles($event)">\n        <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n    </ion-refresher>\n    \x3c!-- Allow selecting the site to view. --\x3e\n    <core-site-picker [hidden]="!filesLoaded" [initialSite]="siteId" (siteSelected)="changeSite($event)"></core-site-picker>\n    <ion-item-divider color="light"></ion-item-divider>\n    <core-loading [hideUntil]="filesLoaded">\n        <ion-list *ngIf="files && files.length > 0">\n            <div *ngFor="let file of files; let idx = index">\n                <core-local-file *ngIf="file.isFile" [file]="file" [manage]="manage" [overrideClick]="pick" (onClick)="filePicked(file)" (onDelete)="fileDeleted(idx)" (onRename)="fileRenamed(idx, $event)"></core-local-file>\n                <a ion-item text-wrap class="item-media" *ngIf="!file.isFile" (click)="openFolder(file)">\n                    <img src="assets/img/files/folder-64.png" alt="{{ \'core.folder\' |Â translate }}" role="presentation" item-start>\n                    <p>{{ file.name }}</p>\n                </a>\n            </div>\n        </ion-list>\n        <core-empty-box *ngIf="files && !files.length && manage" icon="folder" [message]="\'core.sharedfiles.nosharedfiles\' | translate"></core-empty-box>\n        <core-empty-box *ngIf="files && !files.length && !manage" icon="folder" [message]="\'core.sharedfiles.nosharedfilestoupload\' | translate"></core-empty-box>\n    </core-loading>\n</ion-content>\n'}),h("design:paramtypes",[o.B,o.r,f.a,a.a,c.a,s.c,l.a,r.a,o.q])],e)}()}});