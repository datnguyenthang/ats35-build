webpackJsonp([21],{1892:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"CoreSettingsAboutPageModule",function(){return p});var i=n(0),o=n(4),a=n(1),r=n(2020),s=n(16),c=n(15),l=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},p=function(){function e(){}return e=l([Object(i.I)({declarations:[r.a],imports:[s.a,c.a,o.l.forChild(r.a),a.b.forChild()]})],e)}()},2020:function(e,t,n){"use strict";n.d(t,"a",function(){return h});var i=n(0),o=n(4),a=n(397),r=n(9),s=n(27),c=n(79),l=n(93),p=n(78),d=n(2),g=n(72),f=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},v=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},h=function(){function e(e,t,n,i,o,a,r,s){var c=this,l=r.getCurrentSite();if(this.appName=n.isDesktop()?g.a.desktopappname:g.a.appname,this.versionName=g.a.versionname,this.versionCode=g.a.versioncode,this.privacyPolicy=l.getStoredConfig("tool_mobile_apppolicy")||l.getStoredConfig("sitepolicy")||g.a.privacypolicy,this.navigator=window.navigator,window.location&&window.location.href){var p=window.location.href;this.locationHref=p.substr(0,p.indexOf("#"))}if(this.appReady=o.isReady()?"core.yes":"core.no",this.deviceType=e.is("tablet")?"core.tablet":"core.phone",e.is("android"))this.deviceOs="core.android";else if(e.is("ios"))this.deviceOs="core.ios";else if(e.is("windows"))this.deviceOs="core.windowsphone";else{var d=navigator.userAgent.match(/\(([^\)]*)\)/);this.deviceOs=d&&d.length>1?d[1]:"core.unknown"}a.getCurrentLanguage().then(function(e){c.currentLanguage=e}),this.networkStatus=n.isOnline()?"core.online":"core.offline",this.wifiConnection=n.isNetworkAccessLimited()?"core.no":"core.yes",this.deviceWebWorkers=window.Worker&&window.URL?"core.yes":"core.no",this.device=t,i.isAvailable()&&i.getBasePath().then(function(e){c.fileSystemRoot=e,c.fsClickable=i.usesHTMLAPI()}),this.localNotifAvailable=s.isAvailable()?"core.yes":"core.no"}return e=f([Object(i.m)({selector:"page-core-settings-about",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'core.settings.about\' | translate }}</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <ion-item text-wrap>\n        <h2>{{ appName }} {{ versionName }}</h2>\n    </ion-item>\n    <ion-item-group>\n        <ion-item-divider text-wrap color="light">\n            {{ \'core.settings.license\' | translate }}\n        </ion-item-divider>\n        <ion-item text-wrap>\n            <h2>Apache 2.0</h2>\n            <p><a href="http://www.apache.org/licenses/LICENSE-2.0" core-link auto-login="no">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n        </ion-item>\n    </ion-item-group>\n    <ion-item-group *ngIf="privacyPolicy">\n        <ion-item-divider text-wrap color="light">\n            {{ \'core.settings.privacypolicy\' | translate }}\n        </ion-item-divider>\n        <ion-item text-wrap>\n            <p><a [href]="privacyPolicy" core-link auto-login="no">{{ privacyPolicy }}</a></p>\n        </ion-item>\n    </ion-item-group>\n    <ion-item-group>\n        <ion-item-divider text-wrap color="light">\n            {{ \'core.settings.deviceinfo\' | translate }}\n        </ion-item-divider>\n        <ion-item text-wrap *ngIf="versionName">\n            <h2>{{ \'core.settings.versionname\' | translate}}</h2>\n            <p>{{ versionName }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="versionCode">\n            <h2>{{ \'core.settings.versioncode\' | translate}}</h2>\n            <p>{{ versionCode }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="fileSystemRoot">\n            <h2>{{ \'core.settings.filesystemroot\' | translate}}</h2>\n            <p><a *ngIf="fsClickable" [href]="fileSystemRoot" core-link auto-login="no">{{ fileSystemRoot }}</a></p>\n            <p *ngIf="!fsClickable">{{ fileSystemRoot }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="navigator && navigator.userAgent">\n            <h2>{{ \'core.settings.navigatoruseragent\' | translate}}</h2>\n            <p>{{ navigator.userAgent }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="navigator && navigator.language">\n            <h2>{{ \'core.settings.navigatorlanguage\' | translate}}</h2>\n            <p>{{ navigator.language }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="locationHref">\n            <h2>{{ \'core.settings.locationhref\' | translate}}</h2>\n            <p>{{ locationHref }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="appReady">\n            <h2>{{ \'core.settings.appready\' | translate}}</h2>\n            <p>{{ appReady | translate }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="deviceType">\n            <h2>{{ \'core.settings.displayformat\' | translate}}</h2>\n            <p>{{ deviceType | translate }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="deviceOs">\n            <h2>{{ \'core.settings.deviceos\' | translate}}</h2>\n            <p>{{ deviceOs | translate }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="currentLanguage">\n            <h2>{{ \'core.settings.currentlanguage\' | translate}}</h2>\n            <p>{{ currentLanguage }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="networkStatus">\n            <h2>{{ \'core.settings.networkstatus\' | translate}}</h2>\n            <p>{{ networkStatus | translate }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="wifiConnection">\n            <h2>{{ \'core.settings.wificonnection\' | translate}}</h2>\n            <p>{{ wifiConnection | translate }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="deviceWebWorkers">\n            <h2>{{ \'core.settings.devicewebworkers\' | translate}}</h2>\n            <p>{{ deviceWebWorkers | translate }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="device && device.cordova">\n            <h2>{{ \'core.settings.cordovaversion\' | translate}}</h2>\n            <p>{{ device.cordova }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="device && device.platform">\n            <h2>{{ \'core.settings.cordovadeviceplatform\' | translate}}</h2>\n            <p>{{ device.platform }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="device && device.version">\n            <h2>{{ \'core.settings.cordovadeviceosversion\' | translate}}</h2>\n            <p>{{ device.version }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="device && device.model">\n            <h2>{{ \'core.settings.cordovadevicemodel\' | translate}}</h2>\n            <p>{{ device.model }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="device && device.uuid">\n            <h2>{{ \'core.settings.cordovadeviceuuid\' | translate}}</h2>\n            <p>{{ device.uuid }}</p>\n        </ion-item>\n        <ion-item text-wrap *ngIf="localNotifAvailable">\n            <h2>{{ \'core.settings.localnotifavailable\' | translate}}</h2>\n            <p>{{ localNotifAvailable | translate }}</p>\n        </ion-item>\n    </ion-item-group>\n</ion-content>\n'}),v("design:paramtypes",[o.s,a.a,r.a,s.a,c.a,l.a,d.a,p.a])],e)}()}});