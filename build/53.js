webpackJsonp([53],{1858:function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),o.d(n,"AddonNotificationsSettingsPageModule",function(){return f});var t=o(0),i=o(4),r=o(1),s=o(1987),a=o(16),c=o(15),l=this&&this.__decorate||function(e,n,o,t){var i,r=arguments.length,s=r<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,n,o,t);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(n,o,s):i(n,o))||s);return r>3&&s&&Object.defineProperty(n,o,s),s},f=function(){function e(){}return e=l([Object(t.I)({declarations:[s.a],imports:[a.a,c.a,i.l.forChild(s.a),r.b.forChild()]})],e)}()},1987:function(e,n,o){"use strict";o.d(n,"a",function(){return y});var t=o(0),i=o(4),r=o(197),s=o(26),a=o(8),c=o(942),l=o(257),f=o(78),d=o(105),p=o(9),u=o(30),g=o(12),h=o(2),P=o(133),m=this&&this.__decorate||function(e,n,o,t){var i,r=arguments.length,s=r<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,o):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,n,o,t);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(r<3?i(s):r>3?i(n,o,s):i(n,o))||s);return r>3&&s&&Object.defineProperty(n,o,s),s},b=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},v=this&&this.__param||function(e,n){return function(o,t){n(o,t,e)}},y=function(){function e(e,n,o,t,i,r,s,a,c,l,f,d){var p=this;this.notificationsProvider=e,this.domUtils=n,this.settingsHelper=o,this.userProvider=t,this.navCtrl=i,this.messageOutputDelegate=r,this.configProvider=a,this.eventsProvider=c,this.localNotificationsProvider=l,this.sitesProvider=f,this.svComponent=d,this.processorHandlers=[],this.notifPrefsEnabled=e.isNotificationPreferencesEnabled(),this.canChangeSound=l.isAvailable()&&!s.isDesktop(),this.canChangeSound&&a.get(u.a.SETTINGS_NOTIFICATION_SOUND,!0).then(function(e){p.notificationSound=!!e})}return e.prototype.ionViewDidLoad=function(){this.notifPrefsEnabled?this.fetchPreferences():this.preferencesLoaded=!0},e.prototype.fetchPreferences=function(){var e=this;return this.notificationsProvider.getNotificationPreferences().then(function(n){if(e.currentProcessor||(e.currentProcessor=e.settingsHelper.getProcessor(n.processors,"airnotifier")),!e.currentProcessor)return Promise.reject("No processor found");n.disableall=!!n.disableall,e.preferences=n,e.loadProcessor(e.currentProcessor),e.processorHandlers=[],n.processors&&n.processors.forEach(function(n){n.supported=e.messageOutputDelegate.hasHandler(n.name,!0),n.hassettings&&n.supported&&e.processorHandlers.push(e.messageOutputDelegate.getDisplayData(n))})}).catch(function(n){e.domUtils.showErrorModal(n)}).finally(function(){e.preferencesLoaded=!0})},e.prototype.loadProcessor=function(e){e&&(this.currentProcessor=e,this.components=this.settingsHelper.getProcessorComponents(e.name,this.preferences.components))},e.prototype.updatePreferencesAfterDelay=function(){var e=this;clearTimeout(this.updateTimeout),this.updateTimeout=setTimeout(function(){e.updateTimeout=null,e.updatePreferences()},5e3)},e.prototype.updatePreferences=function(){var e=this;this.notificationsProvider.invalidateNotificationPreferences().finally(function(){e.notificationsProvider.getNotificationPreferences()})},e.prototype.changeProcessor=function(e){var n=this;this.preferences.processors.forEach(function(o){o.name==e&&n.loadProcessor(o)})},e.prototype.refreshPreferences=function(e){var n=this;this.notificationsProvider.invalidateNotificationPreferences().finally(function(){n.fetchPreferences().finally(function(){e&&e.complete()})})},e.prototype.openExtraPreferences=function(e){(this.svComponent?this.svComponent.getMasterNav():this.navCtrl).push(e.page,e.pageParams)},e.prototype.changePreference=function(e,n){var o,t=this,i=e.currentProcessor[n],r=e.preferencekey+"_"+i.name;e.processors.forEach(function(e){e[n].checked&&(o?o+=","+e.name:o=e.name)}),o||(o="none"),i.updating=!0,this.userProvider.updateUserPreference(r,o).then(function(){t.updatePreferencesAfterDelay()}).catch(function(o){t.domUtils.showErrorModal(o),e.currentProcessor[n].checked=!e.currentProcessor[n].checked}).finally(function(){i.updating=!1})},e.prototype.disableAll=function(e){var n=this,o=this.domUtils.showModalLoading("core.sending",!0);this.userProvider.updateUserPreferences([],e).then(function(){n.updatePreferencesAfterDelay()}).catch(function(e){n.domUtils.showErrorModal(e),n.preferences.disableall=!n.preferences.disableall}).finally(function(){o.dismiss()})},e.prototype.changeNotificationSound=function(e){var n=this;this.configProvider.set(u.a.SETTINGS_NOTIFICATION_SOUND,e?1:0).finally(function(){var o=n.sitesProvider.getCurrentSiteId();n.eventsProvider.trigger(g.a.NOTIFICATION_SOUND_CHANGED,{enabled:e},o),n.localNotificationsProvider.rescheduleAll()})},e.prototype.ngOnDestroy=function(){this.updateTimeout&&(clearTimeout(this.updateTimeout),this.updatePreferences())},e=m([Object(t.m)({selector:"page-addon-notifications-settings",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'addon.notifications.notificationpreferences\' | translate }}</ion-title>\n        <ion-buttons end>\n        </ion-buttons>\n    </ion-navbar>\n</ion-header>\n<core-navbar-buttons>\n    <core-context-menu *ngIf="processorHandlers.length > 0">\n        <core-context-menu-item *ngFor="let handler of processorHandlers" [priority]="handler.priority" [content]="handler.label | translate" (action)="openExtraPreferences(handler)" [iconAction]="handler.icon"></core-context-menu-item>\n    </core-context-menu>\n</core-navbar-buttons>\n<ion-content>\n    <ion-refresher [enabled]="preferencesLoaded && notifPrefsEnabled" (ionRefresh)="refreshPreferences($event)">\n        <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n    </ion-refresher>\n    <core-loading [hideUntil]="preferencesLoaded">\n        \x3c!-- If notification preferences aren\'t enabled, show only the notification sound setting. --\x3e\n        <ion-item *ngIf="canChangeSound && !notifPrefsEnabled">\n            <ion-label>{{ \'addon.notifications.playsound\' | translate }}</ion-label>\n            <ion-toggle [(ngModel)]="notificationSound" (ionChange)="changeNotificationSound(notificationSound)"></ion-toggle>\n        </ion-item>\n\n        <ng-container *ngIf="notifPrefsEnabled">\n            <ion-card>\n                <ion-item text-wrap *ngIf="preferences">\n                    <ion-label>{{ \'core.settings.disableall\' | translate }}</ion-label>\n                    <ion-toggle [(ngModel)]="preferences.disableall" (ionChange)="disableAll(preferences.disableall)"></ion-toggle>\n                </ion-item>\n                <ion-item text-wrap *ngIf="canChangeSound">\n                    <ion-label>{{ \'addon.notifications.playsound\' | translate }}</ion-label>\n                    <ion-toggle [(ngModel)]="notificationSound" (ionChange)="changeNotificationSound(notificationSound)"></ion-toggle>\n                </ion-item>\n            </ion-card>\n\n            \x3c!-- Show processor selector. --\x3e\n            <ion-select *ngIf="preferences && preferences.processors && preferences.processors.length > 0" [ngModel]="currentProcessor.name" (ngModelChange)="changeProcessor($event)" interface="popover">\n                <ion-option *ngFor="let processor of preferences.processors" [value]="processor.name">{{ processor.displayname }}</ion-option>\n            </ion-select>\n\n            <ion-card list *ngFor="let component of components">\n                <ion-item-divider color="light" text-wrap>\n                    <ion-row no-padding>\n                        <ion-col no-padding>{{ component.displayname }}</ion-col>\n                        <ion-col col-2 text-center no-padding class="hidden-phone">{{ \'core.settings.loggedin\' | translate }}</ion-col>\n                        <ion-col col-2 text-center no-padding class="hidden-phone">{{ \'core.settings.loggedoff\' | translate }}</ion-col>\n                    </ion-row>\n                </ion-item-divider>\n                <ng-container *ngFor="let notification of component.notifications">\n                    \x3c!-- Tablet view --\x3e\n                    <ion-row text-wrap class="hidden-phone" align-items-center>\n                        <ion-col margin-horizontal>{{ notification.displayname }}</ion-col>\n                        <ion-col col-2 text-center *ngFor="let state of [\'loggedin\', \'loggedoff\']">\n                            \x3c!-- If notifications not disabled, show toggle. --\x3e\n                            <ion-spinner [hidden]="preferences.disableall || !(notification.currentProcessor[state] && notification.currentProcessor[state].updating)"></ion-spinner>\n                            <ion-toggle *ngIf="!preferences.disableall" [(ngModel)]="notification.currentProcessor[state].checked" (ionChange)="changePreference(notification, state)" [disabled]="notification.currentProcessor.locked || notification.currentProcessor[state].updating">\n                            </ion-toggle>\n                            \x3c!-- If notifications are disabled, show "Disabled" instead of toggle. --\x3e\n                            <span *ngIf="preferences.disableall">{{ \'core.settings.disabled\' | translate }}</span>\n                        </ion-col>\n                    </ion-row>\n                    \x3c!-- Phone view --\x3e\n                    <ion-list-header text-wrap no-margin class="hidden-tablet">{{ notification.displayname }}</ion-list-header>\n                    \x3c!-- If notifications not disabled, show toggles. If notifications are disabled, show "Disabled" instead of toggle. --\x3e\n                    <ion-item *ngFor="let state of [\'loggedin\', \'loggedoff\']" text-wrap class="hidden-tablet">\n                        <ion-label>{{ \'core.settings.\' + state | translate }}</ion-label>\n                        <ion-spinner item-end *ngIf="!preferences.disableall && (notification.currentProcessor[state] && notification.currentProcessor[state].updating)"></ion-spinner>\n                        <ion-toggle item-end *ngIf="!preferences.disableall" [(ngModel)]="notification.currentProcessor[state].checked" (ionChange)="changePreference(notification, state)" [disabled]="notification.currentProcessor.locked || notification.currentProcessor[state].updating">\n                        </ion-toggle>\n                        <ion-note item-end *ngIf="preferences.disableall">{{ \'core.settings.disabled\' | translate }}</ion-note>\n                    </ion-item>\n                </ng-container>\n            </ion-card>\n        </ng-container>\n    </core-loading>\n</ion-content>\n'}),v(11,Object(t.N)()),b("design:paramtypes",[r.a,a.a,c.a,s.a,i.q,l.a,p.a,d.a,g.a,f.a,h.a,P.a])],e)}()}});