webpackJsonp([88],{1819:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"AddonModFeedbackFormPageModule",function(){return f});var i=n(0),o=n(4),r=n(1),a=n(15),c=n(16),s=n(932),d=n(1943),l=this&&this.__decorate||function(e,t,n,i){var o,r=arguments.length,a=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(a=(r<3?o(a):r>3?o(t,n,a):o(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a},f=function(){function e(){}return e=l([Object(i.I)({declarations:[d.a],imports:[a.a,c.a,s.a,o.l.forChild(d.a),r.b.forChild()]})],e)}()},1943:function(e,t,n){"use strict";n.d(t,"a",function(){return I});var i=n(0),o=n(4),r=n(134),a=n(1),c=n(86),s=n(248),d=n(258),l=n(8),f=n(6),m=n(9),u=n(12),p=n(10),h=n(71),g=n(32),b=n(2),v=this&&this.__decorate||function(e,t,n,i){var o,r=arguments.length,a=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(a=(r<3?o(a):r>3?o(t,n,a):o(t,n))||a);return r>3&&a&&Object.defineProperty(t,n,a),a},k=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},P=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}},I=function(){function e(e,t,n,i,o,r,a,s,d,l,f,m,u,p,h,g,b){var v=this;this.feedbackProvider=t,this.appProvider=n,this.utils=i,this.domUtils=o,this.navCtrl=r,this.feedbackHelper=a,this.courseProvider=s,this.eventsProvider=d,this.feedbackSync=l,this.translate=m,this.loginHelper=u,this.linkHelper=p,this.content=g,this.forceLeave=!1,this.preview=!1,this.component=c.a.COMPONENT,this.offline=!1,this.feedbackLoaded=!1,this.items=[],this.hasPrevPage=!1,this.hasNextPage=!1,this.completed=!1,this.completedOffline=!1,this.module=e.get("module"),this.courseId=e.get("courseId"),this.currentPage=e.get("page"),this.title=e.get("title"),this.preview=!!e.get("preview"),this.componentId=e.get("moduleId")||this.module.id,this.currentSite=h.getCurrentSite(),this.onlineObserver=f.onchange().subscribe(function(e){b.run(function(){v.offline=!e})})}return e.prototype.ionViewDidLoad=function(){var e=this;this.fetchData().then(function(){e.feedbackProvider.logView(e.feedback.id,!0).then(function(){e.courseProvider.checkModuleCompletion(e.courseId,e.module.completionstatus)})})},e.prototype.ionViewDidEnter=function(){this.forceLeave=!1},e.prototype.ionViewCanLeave=function(){if(this.forceLeave)return!0;if(!this.preview){var e=this.feedbackHelper.getPageItemsResponses(this.items);if(this.items&&!this.completed&&this.originalData&&!this.utils.basicLeftCompare(e,this.originalData,3))return this.domUtils.showConfirm(this.translate.instant("core.confirmcanceledit"))}return Promise.resolve()},e.prototype.fetchData=function(){var e=this;return this.offline=!this.appProvider.isOnline(),this.feedbackProvider.getFeedback(this.courseId,this.module.id).then(function(t){return e.feedback=t,e.title=e.feedback.name||e.title,e.fetchAccessData()}).then(function(t){return e.preview||!t.cansubmit||t.isempty?(e.preview=!0,Promise.resolve(0)):void 0===e.currentPage?e.feedbackProvider.getResumePage(e.feedback.id,e.offline,!0):Promise.resolve(e.currentPage)}).catch(function(t){return e.offline||e.utils.isWebServiceError(t)?Promise.reject(t):(e.offline=!0,e.feedbackProvider.getResumePage(e.feedback.id,!0))}).then(function(t){return e.fetchFeedbackPageData(t||0)}).catch(function(t){return e.domUtils.showErrorModalDefault(t,"core.course.errorgetmodule",!0),e.forceLeave=!0,e.navCtrl.pop(),Promise.reject(null)}).finally(function(){e.feedbackLoaded=!0})},e.prototype.fetchAccessData=function(){var e=this;return this.feedbackProvider.getFeedbackAccessInformation(this.feedback.id,this.offline,!0).catch(function(t){return e.offline||e.utils.isWebServiceError(t)?Promise.reject(t):(e.offline=!0,e.feedbackProvider.getFeedbackAccessInformation(e.feedback.id,!0))}).then(function(t){return e.access=t,t})},e.prototype.fetchFeedbackPageData=function(e){var t=this;void 0===e&&(e=0);var n;return this.items=[],this.preview?n=this.feedbackProvider.getItems(this.feedback.id):(this.currentPage=e,n=this.feedbackProvider.getPageItemsWithValues(this.feedback.id,e,this.offline,!0).catch(function(n){return t.offline||t.utils.isWebServiceError(n)?Promise.reject(n):(t.offline=!0,t.feedbackProvider.getPageItemsWithValues(t.feedback.id,e,!0))}).then(function(e){return t.hasPrevPage=!!e.hasprevpage,t.hasNextPage=!!e.hasnextpage,e})),n.then(function(e){if(t.items=e.items.map(function(e){return t.feedbackHelper.getItemForm(e,t.preview)}).filter(function(e){return e}),!t.preview){var n=t.utils.clone(t.items);t.originalData=t.feedbackHelper.getPageItemsResponses(n)}})},e.prototype.gotoPage=function(e){var t=this;this.content&&this.content.scrollToTop(),this.feedbackLoaded=!1;var n=this.feedbackHelper.getPageItemsResponses(this.items),i=this.items.some(function(e){return e.isEmpty||e.hasError});return this.feedbackSync.syncFeedback(this.feedback.id).catch(function(){}).then(function(){return t.feedbackProvider.processPage(t.feedback.id,t.currentPage,n,e,i,t.courseId).then(function(e){var n=parseInt(e.jumpto,10);if(e.completed){t.items=[],t.completed=!0,t.completedOffline=!!e.offline,t.completionPageContents=e.completionpagecontents,t.siteAfterSubmit=e.siteaftersubmit,t.submitted=!0;var i=[];return i.push(t.feedbackProvider.invalidateFeedbackAccessInformationData(t.feedback.id)),i.push(t.feedbackProvider.invalidateResumePageData(t.feedback.id)),Promise.all(i).then(function(){return t.fetchAccessData()})}return isNaN(n)||n==t.currentPage?Promise.resolve():(t.submitted=!0,t.feedbackProvider.invalidateResumePageData(t.feedback.id),t.fetchFeedbackPageData(n))})}).catch(function(e){return t.domUtils.showErrorModalDefault(e,"core.course.errorgetmodule",!0),Promise.reject(null)}).finally(function(){t.feedbackLoaded=!0})},e.prototype.showAnalysis=function(){this.submitted="analysis",this.feedbackHelper.openFeature("analysis",this.navCtrl,this.module,this.courseId)},e.prototype.continue=function(){var e=this;if(this.siteAfterSubmit){var t=this.domUtils.showModalLoading();this.linkHelper.handleLink(this.siteAfterSubmit).then(function(t){if(!t)return e.currentSite.openInBrowserWithAutoLoginIfSameSite(e.siteAfterSubmit)}).finally(function(){t.dismiss()})}else this.loginHelper.redirect("CoreCourseSectionPage",{course:{id:this.courseId}},this.currentSite.getId())},e.prototype.ngOnDestroy=function(){if(this.submitted){this.eventsProvider.trigger(c.a.FORM_SUBMITTED,{feedbackId:this.feedback.id,tab:"analysis"==this.submitted?"analysis":"overview"})}this.onlineObserver&&this.onlineObserver.unsubscribe()},e=v([Object(i.m)({selector:"page-addon-mod-feedback-form",template:'<ion-header>\n    <ion-navbar>\n        <ion-title><core-format-text  [text]=" title "></core-format-text></ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]="feedbackLoaded">\n        <ng-container *ngIf="items && items.length">\n            <ion-list no-margin>\n                <ion-item text-wrap>\n                    <h2>{{ \'addon.mod_feedback.mode\' | translate }}</h2>\n                    <p *ngIf="access.isanonymous">{{ \'addon.mod_feedback.anonymous\' | translate }}</p>\n                    <p *ngIf="!access.isanonymous">{{ \'addon.mod_feedback.non_anonymous\' | translate }}</p>\n                </ion-item>\n                <ng-container *ngFor="let item of items">\n                    <ion-item-divider *ngIf="item.typ == \'pagebreak\'" color="light"></ion-item-divider>\n                    <ion-item text-wrap *ngIf="item.typ != \'pagebreak\'" [color]="item.dependitem > 0 ? \'light\' : \'\'" [class.core-danger-item]="item.isEmpty || item.hasError">\n                        <ion-label *ngIf="item.name" [core-mark-required]="item.required" stacked>\n                            <span *ngIf="item.itemnumber">{{item.itemnumber}}. </span>\n                            <core-format-text  [component]="component" [componentId]="componentId" [text]="item.name"></core-format-text>\n                        </ion-label>\n                        <div item-content class="addon-mod_feedback-form-content" *ngIf="item.template">\n                            <ng-container [ngSwitch]="item.template">\n                                <ng-container *ngSwitchCase="\'label\'">\n                                    <p><core-format-text [component]="component" [componentId]="componentId" [text]="item.presentation"></core-format-text></p>\n                                </ng-container>\n                                <ng-container *ngSwitchCase="\'textfield\'">\n                                    <ion-input type="text" [(ngModel)]="item.value" autocorrect="off" name="{{item.typ}}_{{item.id}}" maxlength="{{item.maxlength}}" [required]="item.required"></ion-input>\n                                </ng-container>\n                                <ng-container *ngSwitchCase="\'numeric\'">\n                                    <ion-input [required]="item.required" name="{{item.typ}}_{{item.id}}" type="number" [(ngModel)]="item.value"></ion-input>\n                                    <p *ngIf="item.hasError" color="error">{{ \'addon.mod_feedback.numberoutofrange\' | translate }} [{{item.rangefrom}}<span *ngIf="item.rangefrom && item.rangeto">, </span>{{item.rangeto}}]</p>\n                                </ng-container>\n                                <ng-container *ngSwitchCase="\'textarea\'">\n                                    <ion-textarea [required]="item.required" name="{{item.typ}}_{{item.id}}" [attr.aria-multiline]="true" [(ngModel)]="item.value"></ion-textarea>\n                                </ng-container>\n                                <ng-container *ngSwitchCase="\'multichoice-r\'">\n                                    <ion-list radio-group [(ngModel)]="item.value" [required]="item.required" name="{{item.typ}}_{{item.id}}">\n                                        <ion-item *ngFor="let option of item.choices">\n                                            <ion-label><core-format-text  [component]="component" [componentId]="componentId" [text]="option.label"></core-format-text></ion-label>\n                                            <ion-radio [value]="option.value"></ion-radio>\n                                        </ion-item>\n                                    </ion-list>\n                                </ng-container>\n                                <ion-list *ngSwitchCase="\'multichoice-c\'">\n                                    <ion-item *ngFor="let option of item.choices">\n                                        <ion-label><core-format-text  [component]="component" [componentId]="componentId" [text]="option.label"></core-format-text></ion-label>\n                                        <ion-checkbox [required]="item.required" name="{{item.typ}}_{{item.id}}" [(ngModel)]="option.checked" value="option.value"></ion-checkbox>\n                                    </ion-item>\n                                </ion-list>\n                                <ng-container *ngSwitchCase="\'multichoice-d\'">\n                                    <ion-select [required]="item.required" name="{{item.typ}}_{{item.id}}" [(ngModel)]="item.value" interface="popover">\n                                        <ion-option *ngFor="let option of item.choices" [value]="option.value"><core-format-text  [component]="component" [componentId]="componentId" [text]="option.label"></core-format-text></ion-option>\n                                    </ion-select>\n                                </ng-container>\n                                <ng-container *ngSwitchCase="\'captcha\'">\n                                    <core-recaptcha *ngIf="!preview && !offline" [publicKey]="item.captcha.recaptchapublickey" [model]="item" modelValueName="value"></core-recaptcha>\n                                    <div *ngIf="!preview && (!item.captcha || offline)" class="core-warning-card" icon-start>\n                                        <ion-icon name="warning"></ion-icon>\n                                        {{ \'addon.mod_feedback.captchaofflinewarning\' | translate }}\n                                    </div>\n                                </ng-container>\n                            </ng-container>\n                        </div>\n                    </ion-item>\n                </ng-container>\n                <ion-grid *ngIf="!preview">\n                    <ion-row align-items-center>\n                        <ion-col *ngIf="hasPrevPage">\n                            <button ion-button block outline icon-start (click)="gotoPage(true)">\n                                <ion-icon name="arrow-back"></ion-icon>\n                                {{ \'addon.mod_feedback.previous_page\' | translate }}\n                            </button>\n                        </ion-col>\n                        <ion-col *ngIf="hasNextPage">\n                            <button ion-button block icon-end (click)="gotoPage(false)">\n                                {{ \'addon.mod_feedback.next_page\' | translate }}\n                                <ion-icon name="arrow-forward"></ion-icon>\n                            </button>\n                        </ion-col>\n                        <ion-col *ngIf="!hasNextPage">\n                            <button ion-button block (click)="gotoPage(false)">\n                                {{ \'addon.mod_feedback.save_entries\' | translate }}\n                            </button>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </ion-list>\n        </ng-container>\n\n        <div class="core-success-card" icon-start *ngIf="completed">\n            <ion-icon name="checkmark"></ion-icon>\n            <p *ngIf="!completionPageContents && !completedOffline">{{ \'addon.mod_feedback.this_feedback_is_already_submitted\' | translate }}</p>\n            <p *ngIf="!completionPageContents && completedOffline">{{ \'addon.mod_feedback.feedback_submitted_offline\' | translate }}</p>\n            <p *ngIf="completionPageContents"><core-format-text  [component]="component" componentId="componentId" [text]="completionPageContents"></core-format-text></p>\n        </div>\n\n        <ion-grid *ngIf="completed">\n            <ion-row align-items-center>\n                <ion-col *ngIf="access.canviewanalysis">\n                    <button ion-button block outline icon-start (click)="showAnalysis()">\n                        <ion-icon name="stats"></ion-icon>\n                        {{ \'addon.mod_feedback.completed_feedbacks\' | translate }}\n                    </button>\n                </ion-col>\n                <ion-col *ngIf="hasNextPage">\n                    <button ion-button block icon-end (click)="continue()">\n                        {{ \'core.continue\' | translate }}\n                        <ion-icon name="arrow-forward"></ion-icon>\n                    </button>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </core-loading>\n</ion-content>\n'}),P(15,Object(i.N)()),k("design:paramtypes",[o.r,c.a,m.a,f.a,l.a,o.q,s.a,p.a,u.a,d.a,r.a,a.c,h.a,g.a,b.a,o.f,i.M])],e)}()}});