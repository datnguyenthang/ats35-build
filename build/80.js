webpackJsonp([80],{1827:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"AddonModGlossaryNewDiscussionPageModule",function(){return c});var o=n(0),i=n(4),s=n(1),a=n(16),r=n(15),l=n(1951),d=this&&this.__decorate||function(t,e,n,o){var i,s=arguments.length,a=s<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,o);else for(var r=t.length-1;r>=0;r--)(i=t[r])&&(a=(s<3?i(a):s>3?i(e,n,a):i(e,n))||a);return s>3&&a&&Object.defineProperty(e,n,a),a},c=function(){function t(){}return t=d([Object(o.I)({declarations:[l.a],imports:[a.a,r.a,i.l.forChild(l.a),s.b.forChild()]})],t)}()},1951:function(t,e,n){"use strict";n.d(e,"a",function(){return u});var o=n(0),i=n(20),s=n(4),a=n(1),r=n(12),l=n(2),d=n(8),c=n(11),g=n(56),h=n(137),y=n(163),m=n(410),p=this&&this.__decorate||function(t,e,n,o){var i,s=arguments.length,a=s<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,o);else for(var r=t.length-1;r>=0;r--)(i=t[r])&&(a=(s<3?i(a):s>3?i(e,n,a):i(e,n))||a);return s>3&&a&&Object.defineProperty(e,n,a),a},f=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},u=function(){function t(t,e,n,o,s,a,r,l,d,c,g){this.navParams=t,this.navCtrl=e,this.translate=n,this.domUtils=o,this.eventsProvider=s,this.sitesProvider=a,this.uploaderProvider=r,this.textUtils=l,this.glossaryProvider=d,this.glossaryOffline=c,this.glossaryHelper=g,this.component=h.a.COMPONENT,this.loaded=!1,this.entry={concept:"",definition:"",timecreated:0},this.options={categories:[],aliases:"",usedynalink:!1,casesensitive:!1,fullmatch:!1},this.attachments=[],this.definitionControl=new i.b,this.categories=[],this.isDestroyed=!1,this.saved=!1,this.courseId=t.get("courseId"),this.module=t.get("module"),this.glossary=t.get("glossary")}return t.prototype.ngOnInit=function(){var t,e=this,n=this.navParams.get("entry");n&&(this.entry.concept=n.concept||"",this.entry.definition=n.definition||"",this.originalData={concept:this.entry.concept,definition:this.entry.definition,files:[]},n.options&&(this.options.categories=n.options.categories||[],this.options.aliases=n.options.aliases||"",this.options.usedynalink=!!n.options.usedynalink,this.options.usedynalink&&(this.options.casesensitive=!!n.options.casesensitive,this.options.fullmatch=!!n.options.fullmatch)),n.attachments&&n.attachments.offline&&(t=this.glossaryHelper.getStoredFiles(this.glossary.id,n.concept,n.timecreated).then(function(t){e.attachments=t,e.originalData.files=t.slice()}))),this.definitionControl.setValue(this.entry.definition),Promise.resolve(t).then(function(){e.glossaryProvider.getAllCategories(e.glossary.id).then(function(t){e.categories=t}).finally(function(){e.loaded=!0})})},t.prototype.onDefinitionChange=function(t){this.entry.definition=t},t.prototype.ionViewCanLeave=function(){var t=this;return(!this.saved&&this.glossaryHelper.hasEntryDataChanged(this.entry,this.attachments,this.originalData)?this.domUtils.showConfirm(this.translate.instant("core.confirmcanceledit")):Promise.resolve()).then(function(){t.uploaderProvider.clearTmpFiles(t.attachments)})},t.prototype.save=function(){var t=this,e=this.entry.definition,n=!1,o=this.entry.timecreated||Date.now();if(this.entry.concept&&e){var i=this.domUtils.showModalLoading("core.sending",!0);e=this.textUtils.formatHtmlLines(e),(this.attachments.length>0?this.glossaryHelper.uploadOrStoreFiles(this.glossary.id,this.entry.concept,o,this.attachments,!1).catch(function(){return n=!0,t.glossaryHelper.uploadOrStoreFiles(t.glossary.id,t.entry.concept,o,t.attachments,!0)}):Promise.resolve()).then(function(i){var s={aliases:t.options.aliases,categories:t.options.categories.join(",")};if(t.glossary.usedynalink&&(s.usedynalink=t.options.usedynalink?1:0,t.options.usedynalink&&(s.casesensitive=t.options.casesensitive?1:0,s.fullmatch=t.options.fullmatch?1:0)),n){return(t.entry&&!t.glossary.allowduplicatedentries?t.glossaryProvider.isConceptUsed(t.glossary.id,t.entry.concept,t.entry.timecreated).then(function(e){if(e)return Promise.reject(t.translate.instant("addon.mod_glossary.errconceptalreadyexists"))}):Promise.resolve()).then(function(){return t.glossaryOffline.addNewEntry(t.glossary.id,t.entry.concept,e,t.courseId,s,i,o,void 0,void 0,t.entry).then(function(){})})}return t.glossaryProvider.addEntry(t.glossary.id,t.entry.concept,e,t.courseId,s,i,o,void 0,t.entry,!t.attachments.length,!t.glossary.allowduplicatedentries)}).then(function(e){e&&t.glossaryHelper.deleteStoredFiles(t.glossary.id,t.entry.concept,o);t.eventsProvider.trigger(h.a.ADD_ENTRY_EVENT,{glossaryId:t.glossary.id},t.sitesProvider.getCurrentSiteId()),t.saved=!0,t.navCtrl.pop()}).catch(function(e){t.domUtils.showErrorModalDefault(e,"addon.mod_glossary.cannoteditentry",!0)}).finally(function(){i.dismiss()})}else this.domUtils.showErrorModal("addon.mod_glossary.fillfields",!0)},t=p([Object(o.m)({selector:"page-addon-mod-glossary-edit",template:'<ion-header>\n    <ion-navbar>\n        <ion-title><core-format-text [text]="module.name"></core-format-text></ion-title>\n        <ion-buttons end>\n            <button ion-button (click)="save()"> {{ \'core.save\' | translate }}</button>\n        </ion-buttons>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]="loaded">\n        <ion-list>\n            <ion-item>\n                <ion-label stacked>{{ \'addon.mod_glossary.concept\' | translate }}</ion-label>\n                <ion-input type="text" [placeholder]="\'addon.mod_glossary.concept\' | translate" [(ngModel)]="entry.concept"></ion-input>\n            </ion-item>\n            <ion-item>\n                <ion-label stacked>{{ \'addon.mod_glossary.definition\' | translate }}</ion-label>\n                <core-rich-text-editor item-content [control]="definitionControl" (contentChanged)="onDefinitionChange($event)" [placeholder]="\'addon.mod_glossary.definition\' | translate" name="addon_mod_glossary_edit" [component]="component" [componentId]="glossary.cmid"></core-rich-text-editor>\n            </ion-item>\n            <ion-item *ngIf="categories.length > 0">\n                <ion-label stacked id="addon-mod-glossary-categories-label">{{ \'addon.mod_glossary.categories\' | translate }}</ion-label>\n                <ion-select [(ngModel)]="options.categories" multiple="true" aria-labelledby="addon-mod-glossary-categories-label" interface="popover">\n                    <ion-option *ngFor="let category of categories" [value]="category.id">{{ category.name }}</ion-option>\n                </ion-select>\n            </ion-item>\n            <ion-item>\n                <ion-label stacked id="addon-mod-glossary-aliases-label">{{ \'addon.mod_glossary.aliases\' | translate }}</ion-label>\n                <ion-textarea [(ngModel)]="options.aliases" rows="1" core-auto-rows aria-labelledby="addon-mod-glossary-aliases-label"></ion-textarea>\n            </ion-item>\n            <ion-item-divider color="light">{{ \'addon.mod_glossary.attachment\' | translate }}</ion-item-divider>\n            <core-attachments [files]="attachments" [component]="component" [componentId]="glossary.cmid" [allowOffline]="true"></core-attachments>\n            <ng-container *ngIf="glossary.usedynalink">\n                <ion-item-divider color="light">{{ \'addon.mod_glossary.linking\' | translate }}</ion-item-divider>\n                <ion-item text-wrap>\n                    <ion-label>{{ \'addon.mod_glossary.entryusedynalink\' | translate }}</ion-label>\n                    <ion-toggle [(ngModel)]="options.usedynalink"></ion-toggle>\n                </ion-item>\n                <ion-item text-wrap>\n                    <ion-label>{{ \'addon.mod_glossary.casesensitive\' | translate }}</ion-label>\n                    <ion-toggle [disabled]="!options.usedynalink" [(ngModel)]="options.casesensitive"></ion-toggle>\n                </ion-item>\n                <ion-item text-wrap>\n                    <ion-label>{{ \'addon.mod_glossary.fullmatch\' | translate }}</ion-label>\n                    <ion-toggle [disabled]="!options.usedynalink" [(ngModel)]="options.fullmatch"></ion-toggle>\n                </ion-item>\n            </ng-container>\n        </ion-list>\n    </core-loading>\n</ion-content>\n'}),f("design:paramtypes",[s.r,s.q,a.c,d.a,r.a,l.a,g.a,c.a,h.a,y.a,m.a])],t)}()}});