webpackJsonp([44],{1868:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),o.d(t,"CoreCoursesCoursePreviewPageModule",function(){return d});var r=o(0),n=o(4),s=o(1),i=o(1996),a=o(16),c=o(15),u=o(66),l=this&&this.__decorate||function(e,t,o,r){var n,s=arguments.length,i=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,r);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(i=(s<3?n(i):s>3?n(t,o,i):n(t,o))||i);return s>3&&i&&Object.defineProperty(t,o,i),i},d=function(){function e(){}return e=l([Object(r.I)({declarations:[i.a],imports:[a.a,c.a,u.a,n.l.forChild(i.a),s.b.forChild()]})],e)}()},1996:function(e,t,o){"use strict";o.d(t,"a",function(){return C});var r=o(0),n=o(4),s=o(1),i=o(9),a=o(12),c=o(2),u=o(8),l=o(11),d=o(41),h=o(104),f=o(10),p=o(21),m=o(97),g=this&&this.__decorate||function(e,t,o,r){var n,s=arguments.length,i=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,r);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(i=(s<3?n(i):s>3?n(t,o,i):n(t,o))||i);return s>3&&i&&Object.defineProperty(t,o,i),i},v=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},C=function(){function e(e,t,o,r,n,s,i,c,u,l,d,h,f,p,m,g){var v=this;this.navCtrl=e,this.sitesProvider=o,this.domUtils=r,this.textUtils=n,this.coursesProvider=i,this.platform=c,this.modalCtrl=u,this.translate=l,this.eventsProvider=d,this.courseOptionsDelegate=h,this.courseHelper=f,this.courseProvider=p,this.courseFormatDelegate=m,this.zone=g,this.canAccessCourse=!0,this.component="CoreCoursesCoursePreview",this.selfEnrolInstances=[],this.avoidOpenCourse=!1,this.prefetchCourseData={prefetchCourseIcon:"spinner",title:"core.course.downloadcourse"},this.isGuestEnabled=!1,this.waitStart=0,this.pageDestroyed=!1,this.course=t.get("course"),this.avoidOpenCourse=t.get("avoidOpenCourse"),this.isMobile=s.isMobile(),this.isDesktop=s.isDesktop(),this.downloadCourseEnabled=!this.coursesProvider.isDownloadCourseDisabledInSite(),this.downloadCourseEnabled&&(this.courseStatusObserver=this.eventsProvider.on(a.a.COURSE_STATUS_CHANGED,function(e){e.courseId==v.course.id&&v.updateCourseStatus(e.status)},this.sitesProvider.getCurrentSiteId()))}return e.prototype.ionViewDidLoad=function(){var e=this,t=this.sitesProvider.getCurrentSite(),o=t&&t.getURL();this.paypalEnabled=this.course.enrollmentmethods&&this.course.enrollmentmethods.indexOf("paypal")>-1,this.guestWSAvailable=this.coursesProvider.isGuestWSAvailable(),this.enrolUrl=this.textUtils.concatenatePaths(o,"enrol/index.php?id="+this.course.id),this.courseUrl=this.textUtils.concatenatePaths(o,"course/view.php?id="+this.course.id),this.paypalReturnUrl=this.textUtils.concatenatePaths(o,"enrol/paypal/return.php"),this.course.overviewfiles&&this.course.overviewfiles.length>0&&(this.course.imageThumb=this.course.overviewfiles[0].fileurl),this.selfEnrolModal=this.modalCtrl.create("CoreCoursesSelfEnrolPasswordPage"),this.selfEnrolModal.onDidDismiss(function(t){void 0!==t&&e.selfEnrolInCourse(t,e.currentInstanceId)}),this.getCourse().finally(function(){e.downloadCourseEnabled&&e.courseHelper.getCourseStatusIconAndTitle(e.course.id).then(function(t){if(e.prefetchCourseData.prefetchCourseIcon=t.icon,e.prefetchCourseData.title=t.title,"spinner"==t.icon){var o=e.courseHelper.getCourseDownloadPromise(e.course.id);o?o.catch(function(t){e.pageDestroyed||e.domUtils.showErrorModalDefault(t,"core.course.errordownloadingcourse",!0)}):e.courseProvider.setCoursePreviousStatus(e.course.id)}})})},e.prototype.ngOnDestroy=function(){this.pageDestroyed=!0,this.courseStatusObserver&&this.courseStatusObserver.off()},e.prototype.canAccessAsGuest=function(){if(!this.isGuestEnabled)return Promise.reject(null);this.guestInstanceId=void 0;for(var e=0;e<this.enrollmentMethods.length;e++){var t=this.enrollmentMethods[e];if("guest"==t.type){this.guestInstanceId=t.id;break}}return this.guestInstanceId?this.coursesProvider.getCourseGuestEnrolmentInfo(this.guestInstanceId).then(function(e){return e.status?e.passwordrequired:Promise.reject(null)}):Promise.reject(null)},e.prototype.getCourse=function(e){var t=this;return this.selfEnrolInstances=[],this.coursesProvider.getCourseEnrolmentMethods(this.course.id).then(function(e){t.enrollmentMethods=e,t.enrollmentMethods.forEach(function(e){"self"===e.type?t.selfEnrolInstances.push(e):t.guestWSAvailable&&"guest"===e.type&&(t.isGuestEnabled=!0)})}).catch(function(e){t.domUtils.showErrorModalDefault(e,"Error getting enrolment data")}).then(function(){return t.coursesProvider.getUserCourse(t.course.id).then(function(e){return t.isEnrolled=!0,e}).catch(function(){return t.isEnrolled=!1,t.coursesProvider.getCourse(t.course.id)}).then(function(e){t.course.fullname=e.fullname||t.course.fullname,t.course.summary=e.summary||t.course.summary,t.canAccessCourse=!0}).catch(function(){return t.canAccessAsGuest().then(function(e){t.canAccessCourse=!e}).catch(function(){t.canAccessCourse=!1})})}).finally(function(){t.dataLoaded=!0})},e.prototype.openCourse=function(){this.canAccessCourse&&!this.avoidOpenCourse&&this.courseFormatDelegate.openCourse(this.navCtrl,this.course)},e.prototype.paypalEnrol=function(){var e,t,o,r,n,s=this,i=!1,a=function(t){-1!=t.url.indexOf(s.paypalReturnUrl)?i=!0:-1!=t.url.indexOf(s.courseUrl)&&i&&(c(),e.close())},c=function(){u(),s.dataLoaded&&(s.dataLoaded=!1,s.refreshData())},u=function(){t&&t.unsubscribe(),o&&o.unsubscribe(),r&&r.unsubscribe(),n&&n.unsubscribe()};this.sitesProvider.getCurrentSite().openInAppWithAutoLogin(this.enrolUrl).then(function(i){e=i,(s.isDesktop||s.isMobile)&&(t=e.on("loadstart").subscribe(function(e){s.zone.run(function(){return a(e)})}),r=e.on("exit").subscribe(function(){s.zone.run(c)})),s.isDesktop&&(o=e.on("loadstop").subscribe(a),n=s.platform.resume.subscribe(function(){s.dataLoaded&&(s.dataLoaded=!1,s.refreshData())}))})},e.prototype.selfEnrolClicked=function(e){var t=this;this.domUtils.showConfirm(this.translate.instant("core.courses.confirmselfenrol")).then(function(){t.selfEnrolInCourse("",e)}).catch(function(){})},e.prototype.selfEnrolInCourse=function(e,t){var o=this,r=this.domUtils.showModalLoading("core.loading",!0);return this.coursesProvider.selfEnrol(this.course.id,e,t).then(function(){o.isEnrolled=!0,o.dataLoaded=!1,o.waitForEnrolled(!0).then(function(){o.refreshData().finally(function(){o.eventsProvider.trigger(d.a.EVENT_MY_COURSES_UPDATED,{},o.sitesProvider.getCurrentSiteId())})})}).catch(function(r){r&&r.code===d.a.ENROL_INVALID_KEY&&(o.selfEnrolModal.present(),o.currentInstanceId=t,!e)||o.domUtils.showErrorModalDefault(r,"core.courses.errorselfenrol",!0)}).finally(function(){r.dismiss()})},e.prototype.refreshData=function(e){var t=this,o=[];return o.push(this.coursesProvider.invalidateUserCourses()),o.push(this.coursesProvider.invalidateCourse(this.course.id)),o.push(this.coursesProvider.invalidateCourseEnrolmentMethods(this.course.id)),o.push(this.courseOptionsDelegate.clearAndInvalidateCoursesOptions(this.course.id)),this.guestInstanceId&&o.push(this.coursesProvider.invalidateCourseGuestEnrolmentInfo(this.guestInstanceId)),Promise.all(o).finally(function(){return t.getCourse(!0)}).finally(function(){e&&e.complete()})},e.prototype.updateCourseStatus=function(e){var t=this.courseHelper.getCourseStatusIconAndTitleFromStatus(e);this.prefetchCourseData.prefetchCourseIcon=t.icon,this.prefetchCourseData.title=t.title},e.prototype.waitForEnrolled=function(e){var t=this;return e&&(this.waitStart=Date.now()),this.coursesProvider.invalidateUserCourses().catch(function(){}).then(function(){return t.coursesProvider.getUserCourse(t.course.id)}).catch(function(){if(!(t.pageDestroyed||Date.now()-t.waitStart>6e4))return new Promise(function(e,o){setTimeout(function(){t.pageDestroyed?e():t.waitForEnrolled().then(e)},5e3)})})},e.prototype.prefetchCourse=function(){var e=this;this.courseHelper.confirmAndPrefetchCourse(this.prefetchCourseData,this.course).catch(function(t){e.pageDestroyed||e.domUtils.showErrorModalDefault(t,"core.course.errordownloadingcourse",!0)})},e=g([Object(r.m)({selector:"page-core-courses-course-preview",template:'<ion-header>\n    <ion-navbar>\n        <ion-title><core-format-text [text]="course.fullname"></core-format-text></ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <ion-refresher [enabled]="dataLoaded" (ionRefresh)="refreshData($event)">\n        <ion-refresher-content pullingText="{{ \'core.pulltorefresh\' | translate }}"></ion-refresher-content>\n    </ion-refresher>\n    <core-loading [hideUntil]="dataLoaded">\n\n        <ion-list *ngIf="course">\n            <div *ngIf="course.imageThumb" (click)="openCourse()" class="core-course-thumb">\n                <img [src]="course.imageThumb" core-external-content alt=""/>\n            </div>\n            <a ion-item text-wrap (click)="openCourse()" [title]="course.fullname" [attr.detail-none]=" avoidOpenCourse || !canAccessCourse">\n                <core-icon name="fa-graduation-cap" fixed-width item-start></core-icon>\n                <h2><core-format-text [text]="course.fullname"></core-format-text></h2>\n                <p *ngIf="course.categoryname"><core-format-text [text]="course.categoryname"></core-format-text></p>\n                <p *ngIf="course.startdate">{{course.startdate * 1000 | coreFormatDate:"dfdaymonthyear"}} <span *ngIf="course.enddate"> - {{course.enddate * 1000 | coreFormatDate:"dfdaymonthyear"}}</span></p>\n            </a>\n\n            <ion-item text-wrap *ngIf="course.summary" detail-none>\n                <core-format-text [text]="course.summary" maxHeight="120"></core-format-text>\n            </ion-item>\n\n            <ng-container text-wrap *ngIf="course.contacts && course.contacts.length">\n                <ion-item-divider color="light">{{ \'core.teachers\' | translate }}</ion-item-divider>\n                <a ion-item text-wrap *ngFor="let contact of course.contacts" core-user-link userId="{{contact.id}}" courseId="{{isEnrolled ? course.id : null}}" [attr.aria-label]="\'core.viewprofile\' | translate">\n                    <ion-avatar item-start>\n                        <img [src]="contact.userpictureurl" onError="this.src=\'assets/img/user-avatar.png\'" core-external-content [alt]="\'core.pictureof\' | translate:{$a: contact.userfullname}" role="presentation">\n                    </ion-avatar>\n                    <h2>{{contact.fullname}}</h2>\n                </a>\n                <ion-item-divider color="light"></ion-item-divider>\n            </ng-container>\n            <core-file *ngFor="let file of course.overviewfiles" [file]="file" [component]="component" [componentId]="course.id"></core-file>\n            <div *ngIf="!isEnrolled" detail-none>\n                <ion-item text-wrap *ngFor="let instance of selfEnrolInstances">\n                    <h2>{{ instance.name }}</h2>\n                    <button ion-button block margin-top (click)="selfEnrolClicked(instance.id)">{{ \'core.courses.enrolme\' | translate }}</button>\n                </ion-item>\n            </div>\n            <ion-item text-wrap *ngIf="!isEnrolled && paypalEnabled" detail-none>\n                <h2>{{ \'core.courses.paypalaccepted\' | translate }}</h2>\n                <p>{{ \'core.paymentinstant\' | translate }}</p>\n                <button ion-button block margin-top (click)="paypalEnrol()">{{ \'core.courses.sendpaymentbutton\' | translate }}</button>\n            </ion-item>\n            <ion-item *ngIf="!isEnrolled && !selfEnrolInstances.length && !paypalEnabled">\n                <p>{{ \'core.courses.notenrollable\' | translate }}</p>\n            </ion-item>\n            <a ion-item *ngIf="canAccessCourse && downloadCourseEnabled" (click)="prefetchCourse()" detail-none [attr.aria-label]="prefetchCourseData.title | translate">\n                <core-icon *ngIf="prefetchCourseData.prefetchCourseIcon != \'spinner\'" [name]="prefetchCourseData.prefetchCourseIcon" item-start></core-icon>\n                <ion-spinner *ngIf="prefetchCourseData.prefetchCourseIcon == \'spinner\'" item-start></ion-spinner>\n                <h2>{{ \'core.course.downloadcourse\' | translate }}</h2>\n            </a>\n            <a ion-item (click)="openCourse()" [title]="course.fullname" *ngIf="!avoidOpenCourse && canAccessCourse">\n                <ion-icon name="briefcase" item-start></ion-icon>\n                <h2>{{ \'core.course.contents\' | translate }}</h2>\n            </a>\n        </ion-list>\n    </core-loading>\n</ion-content>\n'}),v("design:paramtypes",[n.q,n.r,c.a,u.a,l.a,i.a,d.a,n.s,n.o,s.c,a.a,h.a,p.a,f.a,m.a,r.M])],e)}()}});