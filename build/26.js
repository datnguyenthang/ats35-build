webpackJsonp([26],{1886:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i.d(e,"CoreLoginSitePolicyPageModule",function(){return f});var n=i(0),o=i(4),r=i(2014),c=i(1),a=i(16),l=i(15),s=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,c=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(c=(r<3?o(c):r>3?o(e,i,c):o(e,i))||c);return r>3&&c&&Object.defineProperty(e,i,c),c},f=function(){function t(){}return t=s([Object(n.I)({declarations:[r.a],imports:[a.a,l.a,o.l.forChild(r.a),c.b.forChild()]})],t)}()},2014:function(t,e,i){"use strict";i.d(e,"a",function(){return h});var n=i(0),o=i(4),r=i(2),c=i(8),a=i(77),l=i(6),s=i(71),f=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,c=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(c=(r<3?o(c):r>3?o(e,i,c):o(e,i))||c);return r>3&&c&&Object.defineProperty(e,i,c),c},u=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},h=function(){function t(t,e,i,n,o,r,c){this.navCtrl=t,this.loginHelper=i,this.domUtils=n,this.sitesProvider=o,this.utils=r,this.mimeUtils=c,this.siteId=e.get("siteId")}return t.prototype.ionViewDidLoad=function(){if(this.currentSite=this.sitesProvider.getCurrentSite(),this.currentSite){var t=this.currentSite.id;this.siteId=this.siteId||t,this.siteId==t&&this.currentSite.wsAvailable("core_user_agree_site_policy")?this.fetchSitePolicy():this.cancel()}else this.cancel()},t.prototype.fetchSitePolicy=function(){var t=this;return this.loginHelper.getSitePolicy(this.siteId).then(function(e){return t.sitePolicy=e,t.utils.getMimeTypeFromUrl(e).then(function(i){var n=t.mimeUtils.getExtension(i,e);t.showInline="html"==n||"htm"==n}).catch(function(){t.showInline=!1}).finally(function(){t.policyLoaded=!0})}).catch(function(e){t.domUtils.showErrorModalDefault(e&&e.error,"Error getting site policy."),t.cancel()})},t.prototype.cancel=function(){var t=this;this.sitesProvider.logout().catch(function(){}).then(function(){t.navCtrl.setRoot("CoreLoginSitesPage")})},t.prototype.accept=function(){var t=this,e=this.domUtils.showModalLoading("core.sending",!0);this.loginHelper.acceptSitePolicy(this.siteId).then(function(){return t.currentSite.invalidateWsCache().catch(function(){}).then(function(){return t.loginHelper.goToSiteInitialPage()})}).catch(function(e){t.domUtils.showErrorModalDefault(e.message,"Error accepting site policy.")}).finally(function(){e.dismiss()})},t=f([Object(n.m)({selector:"page-core-login-site-policy",template:'<ion-header>\n    <ion-navbar>\n        <ion-title>{{ \'core.login.policyagreement\' | translate }}</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]="policyLoaded">\n        <ion-list>\n            <ion-item text-wrap>\n                {{ \'core.login.policyagree\' | translate }}\n            </ion-item>\n            <ion-item text-wrap>\n                <p><a [href]="sitePolicy" core-link [capture]="false">{{ \'core.login.policyagreementclick\' | translate }}</a></p>\n            </ion-item>\n            <ion-card *ngIf="showInline">\n                <core-iframe [src]="sitePolicy"></core-iframe>\n            </ion-card>\n            <ion-item text-wrap padding>\n                <button ion-button block color="primary" (click)="accept()">{{ \'core.login.policyaccept\' | translate }}</button>\n                <button ion-button block (click)="cancel()">{{ \'core.login.cancel\' | translate }}</button>\n            </ion-item>\n        </ion-list>\n    </core-loading>\n</ion-content>\n'}),u("design:paramtypes",[o.q,o.r,s.a,c.a,r.a,l.a,a.a])],t)}()}});